{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["'''\n","This code is meant to do the cleaning of the ingredients \n","that are in yummly\n","\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"J0EkK6pwpVd0","executionInfo":{"status":"ok","timestamp":1680672182694,"user_tz":-120,"elapsed":5,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"c867055d-6a41-475b-d4a9-8206151c82ee"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nThis code is meant to do the cleaning of the ingredients \\nthat are in yummly\\n\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":1}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCeXGUOvpJDs","executionInfo":{"status":"ok","timestamp":1680855853763,"user_tz":-120,"elapsed":4664,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"384ac9c0-5464-42a7-c8e5-b4052f8fc0f7"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":1}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","from nltk.stem import WordNetLemmatizer\n","from nltk.stem.snowball import SnowballStemmer\n","from nltk.tokenize import word_tokenize\n","import re\n","import pickle\n","import itertools\n","from collections import Counter\n","from sklearn.preprocessing import normalize\n","import nltk\n","nltk.download('punkt')\n","nltk.download('wordnet')\n","nltk.download('omw-1.4')"]},{"cell_type":"code","source":["! pip install pandasql\n","from pandasql import sqldf"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"btQkqo7pwZMb","executionInfo":{"status":"ok","timestamp":1680855884173,"user_tz":-120,"elapsed":6727,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"1865e0ea-d143-4bca-9d4b-56ffc3287dd6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pandasql\n","  Downloading pandasql-0.7.3.tar.gz (26 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from pandasql) (1.22.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from pandasql) (1.4.4)\n","Requirement already satisfied: sqlalchemy in /usr/local/lib/python3.9/dist-packages (from pandasql) (1.4.47)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->pandasql) (2022.7.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas->pandasql) (2.8.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.9/dist-packages (from sqlalchemy->pandasql) (2.0.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas->pandasql) (1.16.0)\n","Building wheels for collected packages: pandasql\n","  Building wheel for pandasql (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pandasql: filename=pandasql-0.7.3-py3-none-any.whl size=26784 sha256=69e6048cfe937e7df45d957c565f2c6368ecd6887de6bf03ad341b9649deae9a\n","  Stored in directory: /root/.cache/pip/wheels/63/e8/ec/75b1df467ecf57b6ececb32cb16f4e86697cbfe55cb0c51f07\n","Successfully built pandasql\n","Installing collected packages: pandasql\n","Successfully installed pandasql-0.7.3\n"]}]},{"cell_type":"code","source":["def elim_Unnamed(the_df):\n","    cols_to_drop = [col for col in the_df.columns if col.startswith('Unnamed:')]\n","    the_df=the_df.drop(cols_to_drop, axis=1)\n","    return the_df \n","\n","# missing data\n","def missing_cols(df):\n","    ''' Prints out columns with its amount of missing values'''\n","    total = 0 \n","    for col in df.columns:\n","        missing_vals = df[col].isnull().sum()\n","        total += missing_vals\n","        if missing_vals != 0:\n","            print(f\"{col} => {df[col].isnull().sum()}\")\n","            \n","    if total == 0:\n","        print(\"no missing values left\")"],"metadata":{"id":"ajTb7RAxr5jZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum = pd.read_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/Data/yummly.pkl')\n","yum=elim_Unnamed(yum)\n","#drop duplicates\n","yum = yum.drop_duplicates(['id'], keep='first').reset_index(drop=True)\n","yum"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"maUBPZoTpS42","executionInfo":{"status":"ok","timestamp":1680769976059,"user_tz":-120,"elapsed":813,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"8b154af0-8d66-4211-b0a7-e96962d71688"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                    id  \\\n","0                  Southern-Cornbread-Dressing-1357820   \n","1                           Peanut-butter-fudge-297693   \n","2                                      Buckeyes-298471   \n","3              Disappearing-buffalo-chicken-dip-297712   \n","4                        Classic-macaroni-salad-304692   \n","...                                                ...   \n","8032                  Thai-Style-Broiled-Shrimp-779084   \n","8033                      Pad-Thai-French-Fries-984208   \n","8034                Spicy-Thai-Lobster-Soup-My-Recipes   \n","8035         Thai-Green-Papaya-Salad-_Som-Tam_-1266284   \n","8036  Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                             recipeName  rating  totalTimeInSeconds  \\\n","0           Southern Cornbread Dressing       4              3600.0   \n","1                   Peanut Butter Fudge       4              8100.0   \n","2                              Buckeyes       4              6600.0   \n","3      Disappearing Buffalo Chicken Dip       4              2100.0   \n","4                Classic Macaroni Salad       4              1500.0   \n","...                                 ...     ...                 ...   \n","8032          Thai-Style Broiled Shrimp       3               600.0   \n","8033              Pad Thai French Fries       4              1800.0   \n","8034            Spicy Thai Lobster Soup       4              3300.0   \n","8035  Thai Green Papaya Salad (Som Tam)       4              1200.0   \n","8036    Thai Salad with Peanut Dressing       4               900.0   \n","\n","                     course                 cuisine  \\\n","0                       NaN  [Southern & Soul Food]   \n","1                [Desserts]              [American]   \n","2                [Desserts]              [American]   \n","3              [Appetizers]              [American]   \n","4     [Salads, Side Dishes]              [American]   \n","...                     ...                     ...   \n","8032                    NaN                  [Thai]   \n","8033                    NaN                  [Thai]   \n","8034   [Main Dishes, Soups]           [Asian, Thai]   \n","8035          [Main Dishes]        [Barbecue, Thai]   \n","8036               [Salads]                  [Thai]   \n","\n","                                            ingredients  \n","0     [buttermilk cornbread, sandwich bread, salt, b...  \n","1     [Country CrockÂ® Spread, light corn syrup, cre...  \n","2     [SkippyÂ® Super ChunkÂ® Peanut Butter, Country...  \n","3     [light mayonnaise, lemon juice, cayenne pepper...  \n","4     [elbow macaroni, hellmann' or best food real m...  \n","...                                                 ...  \n","8032  [garlic cloves, thai chile, salt, sugar, fish ...  \n","8033  [sauce, fish sauce, cilantro, lime, peanuts, c...  \n","8034  [lobster, vegetable oil, asian, fish, lime rin...  \n","8035  [fresh lime juice, palm sugar, fish sauce, gar...  \n","8036  [water, rice vinegar, green onions, reduced fa...  \n","\n","[8037 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-7beba4c1-9d9b-4d06-b9e8-aec0516367f5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>[Southern &amp; Soul Food]</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Peanut-butter-fudge-297693</td>\n","      <td>Peanut Butter Fudge</td>\n","      <td>4</td>\n","      <td>8100.0</td>\n","      <td>[Desserts]</td>\n","      <td>[American]</td>\n","      <td>[Country CrockÂ® Spread, light corn syrup, cre...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Buckeyes-298471</td>\n","      <td>Buckeyes</td>\n","      <td>4</td>\n","      <td>6600.0</td>\n","      <td>[Desserts]</td>\n","      <td>[American]</td>\n","      <td>[SkippyÂ® Super ChunkÂ® Peanut Butter, Country...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>[American]</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>[American]</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>8032</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>[Thai]</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","    </tr>\n","    <tr>\n","      <th>8033</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>[Thai]</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","    </tr>\n","    <tr>\n","      <th>8034</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>[Asian, Thai]</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","    </tr>\n","    <tr>\n","      <th>8035</th>\n","      <td>Thai-Green-Papaya-Salad-_Som-Tam_-1266284</td>\n","      <td>Thai Green Papaya Salad (Som Tam)</td>\n","      <td>4</td>\n","      <td>1200.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>[Barbecue, Thai]</td>\n","      <td>[fresh lime juice, palm sugar, fish sauce, gar...</td>\n","    </tr>\n","    <tr>\n","      <th>8036</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>[Thai]</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8037 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7beba4c1-9d9b-4d06-b9e8-aec0516367f5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7beba4c1-9d9b-4d06-b9e8-aec0516367f5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7beba4c1-9d9b-4d06-b9e8-aec0516367f5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["''' let's check the different characts in rating total time in seconds, course and cuisine '''\n","print(yum.info())\n","sns.boxplot(data=yum, x='rating',y='totalTimeInSeconds')\n","''' in the boxplot the recipes with higher ratings take more time'''\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":727},"id":"gTO65LcusIeU","executionInfo":{"status":"ok","timestamp":1680769982433,"user_tz":-120,"elapsed":1964,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"113d352b-67e1-4d25-ae24-5dcdf9832ecb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 8037 entries, 0 to 8036\n","Data columns (total 7 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   id                  8037 non-null   object \n"," 1   recipeName          8037 non-null   object \n"," 2   rating              8037 non-null   int64  \n"," 3   totalTimeInSeconds  7733 non-null   float64\n"," 4   course              7302 non-null   object \n"," 5   cuisine             8037 non-null   object \n"," 6   ingredients         8037 non-null   object \n","dtypes: float64(1), int64(1), object(5)\n","memory usage: 439.6+ KB\n","None\n"]},{"output_type":"execute_result","data":{"text/plain":["' in the boxplot the recipes with higher ratings take more time'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["missing_cols(yum)\n","''' For this excercise we are not going to use the time of preparation so we can eliminate it '''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"crGIEatnvaOS","executionInfo":{"status":"ok","timestamp":1680769985972,"user_tz":-120,"elapsed":307,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"d59a2be6-71cd-4979-ebe7-9dfd2e251247"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["totalTimeInSeconds => 304\n","course => 735\n"]},{"output_type":"execute_result","data":{"text/plain":["' For this excercise we are not going to use the time of preparation so we can eliminate it '"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["''' Analysis of the rating of the amount of recipes per rating '''\n","\n","query = \"SELECT rating, count(recipeName) as num_rcps_pr_rtng FROM yum GROUP BY rating ORDER BY num_rcps_pr_rtng DESC\"\n","rating_recipes = sqldf(query)\n","print(rating_recipes)\n","''' Given these results we are going to eliminate all the recipes that have rating less than 2'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"id":"upR75cMDwhAv","executionInfo":{"status":"ok","timestamp":1680769988867,"user_tz":-120,"elapsed":1030,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"ac3f6f44-2d36-4123-dd91-7e5f91115c3c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   rating  num_rcps_pr_rtng\n","0       4              4988\n","1       3              1517\n","2       5              1379\n","3       0               106\n","4       2                44\n","5       1                 3\n"]},{"output_type":"execute_result","data":{"text/plain":["' Given these results we are going to eliminate all the recipes that have rating less than 2'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["''' the number of recipes per course '''\n","query = \"SELECT course, count(recipeName) as num_rcps_pr_crss FROM yum GROUP BY course ORDER BY num_rcps_pr_crss DESC\"\n","courses_recipes = sqldf(query)\n","print(courses_recipes)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XS33Zg1hx_Aq","executionInfo":{"status":"ok","timestamp":1680769992640,"user_tz":-120,"elapsed":313,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"2ce4da10-09e9-4124-897b-ed7c78fd7293"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                              course  num_rcps_pr_crss\n","0                                      [Main Dishes]              3076\n","1                                               None               735\n","2                                         [Desserts]               578\n","3                                                 []               500\n","4                                            [Soups]               455\n","..                                               ...               ...\n","104  [Appetizers, Breakfast and Brunch, Side Dishes]                 1\n","105  [Appetizers, Breakfast and Brunch, Main Dishes]                 1\n","106                             [Appetizers, Breads]                 1\n","107                [Afternoon Tea, Lunch and Snacks]                 1\n","108      [Afternoon Tea, Desserts, Lunch and Snacks]                 1\n","\n","[109 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["\n","''' we have some desserts, beverages snacks and empty courses we are going to take them all\n","if it adds any noise then we'll group them '''\n","\n","courses_recipes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"ogA2oDplzijP","executionInfo":{"status":"ok","timestamp":1680769996196,"user_tz":-120,"elapsed":243,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"9a629775-4a16-41e6-aee4-d15bd5d8d565"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              course  num_rcps_pr_crss\n","0                                      [Main Dishes]              3076\n","1                                               None               735\n","2                                         [Desserts]               578\n","3                                                 []               500\n","4                                            [Soups]               455\n","..                                               ...               ...\n","104  [Appetizers, Breakfast and Brunch, Side Dishes]                 1\n","105  [Appetizers, Breakfast and Brunch, Main Dishes]                 1\n","106                             [Appetizers, Breads]                 1\n","107                [Afternoon Tea, Lunch and Snacks]                 1\n","108      [Afternoon Tea, Desserts, Lunch and Snacks]                 1\n","\n","[109 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-716fd7e5-d3f4-4e2a-aaea-f6a3e84a7439\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>course</th>\n","      <th>num_rcps_pr_crss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[Main Dishes]</td>\n","      <td>3076</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>None</td>\n","      <td>735</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[Desserts]</td>\n","      <td>578</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[]</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[Soups]</td>\n","      <td>455</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>[Appetizers, Breakfast and Brunch, Side Dishes]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>[Appetizers, Breakfast and Brunch, Main Dishes]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>[Appetizers, Breads]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>107</th>\n","      <td>[Afternoon Tea, Lunch and Snacks]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>108</th>\n","      <td>[Afternoon Tea, Desserts, Lunch and Snacks]</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>109 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-716fd7e5-d3f4-4e2a-aaea-f6a3e84a7439')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-716fd7e5-d3f4-4e2a-aaea-f6a3e84a7439 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-716fd7e5-d3f4-4e2a-aaea-f6a3e84a7439');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["''' the number of recipes per cuisine '''\n","query = \"SELECT cuisine, count(recipeName) as num_rcps_pr_csn FROM yum GROUP BY course ORDER BY num_rcps_pr_csn DESC\"\n","cuisine_recipes = sqldf(query)\n","print(cuisine_recipes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SuN1gBvazZsk","executionInfo":{"status":"ok","timestamp":1680770000569,"user_tz":-120,"elapsed":569,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"fbf58bdc-16bb-4c2e-8a3c-c2cde4d148cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                              cuisine  num_rcps_pr_csn\n","0                          [American]             3076\n","1              [Southern & Soul Food]              735\n","2                          [American]              578\n","3    [Southern & Soul Food, American]              500\n","4            [American, Kid-Friendly]              455\n","..                                ...              ...\n","104                          [German]                1\n","105                         [Spanish]                1\n","106                           [Greek]                1\n","107                         [English]                1\n","108                          [German]                1\n","\n","[109 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["''' clean the recipes by taking them out of the brackets '''\n","cuisine_recipes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"Bk4g_3sP1ZeL","executionInfo":{"status":"ok","timestamp":1680770002471,"user_tz":-120,"elapsed":254,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"18d3e581-e92e-45e9-fca7-c84d888fb5b6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                              cuisine  num_rcps_pr_csn\n","0                          [American]             3076\n","1              [Southern & Soul Food]              735\n","2                          [American]              578\n","3    [Southern & Soul Food, American]              500\n","4            [American, Kid-Friendly]              455\n","..                                ...              ...\n","104                          [German]                1\n","105                         [Spanish]                1\n","106                           [Greek]                1\n","107                         [English]                1\n","108                          [German]                1\n","\n","[109 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-94228f26-9490-4e84-be32-ba72095b1b5a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cuisine</th>\n","      <th>num_rcps_pr_csn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[American]</td>\n","      <td>3076</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[Southern &amp; Soul Food]</td>\n","      <td>735</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[American]</td>\n","      <td>578</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[Southern &amp; Soul Food, American]</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[American, Kid-Friendly]</td>\n","      <td>455</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>[German]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>[Spanish]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>[Greek]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>107</th>\n","      <td>[English]</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>108</th>\n","      <td>[German]</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>109 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94228f26-9490-4e84-be32-ba72095b1b5a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-94228f26-9490-4e84-be32-ba72095b1b5a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-94228f26-9490-4e84-be32-ba72095b1b5a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["#drop low ratings\n","yum = yum[yum['rating']>2].reset_index(drop=True)\n","#drop dishes such as dessert and sauce\n","yum = yum[yum['course']!='[Desserts]'].reset_index(drop=True)\n","yum = yum[yum['course']!='[Condiments and Sauces]'].reset_index(drop=True)\n","#clean up cuisine labels\n","yum['cuisine']= yum['cuisine'].apply(lambda x: x.strip('[]')).reset_index(drop=True)\n","yum"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"nAP5sblq2Z4p","executionInfo":{"status":"ok","timestamp":1680770006360,"user_tz":-120,"elapsed":364,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"5daf6d0e-c0e9-45a7-b22a-dfc5140bc632"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     id  \\\n","0                   Southern-Cornbread-Dressing-1357820   \n","1               Disappearing-buffalo-chicken-dip-297712   \n","2                         Classic-macaroni-salad-304692   \n","3                               Classic-coleslaw-303481   \n","4     Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","...                                                 ...   \n","7127                   Thai-Style-Broiled-Shrimp-779084   \n","7128                       Pad-Thai-French-Fries-984208   \n","7129                 Spicy-Thai-Lobster-Soup-My-Recipes   \n","7130          Thai-Green-Papaya-Salad-_Som-Tam_-1266284   \n","7131   Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                                             recipeName  rating  \\\n","0                           Southern Cornbread Dressing       4   \n","1                      Disappearing Buffalo Chicken Dip       4   \n","2                                Classic Macaroni Salad       4   \n","3                                      Classic Coleslaw       4   \n","4     Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","...                                                 ...     ...   \n","7127                          Thai-Style Broiled Shrimp       3   \n","7128                              Pad Thai French Fries       4   \n","7129                            Spicy Thai Lobster Soup       4   \n","7130                  Thai Green Papaya Salad (Som Tam)       4   \n","7131                    Thai Salad with Peanut Dressing       4   \n","\n","      totalTimeInSeconds                 course  \\\n","0                 3600.0                    NaN   \n","1                 2100.0           [Appetizers]   \n","2                 1500.0  [Salads, Side Dishes]   \n","3                  600.0  [Salads, Side Dishes]   \n","4                 1380.0          [Main Dishes]   \n","...                  ...                    ...   \n","7127               600.0                    NaN   \n","7128              1800.0                    NaN   \n","7129              3300.0   [Main Dishes, Soups]   \n","7130              1200.0          [Main Dishes]   \n","7131               900.0               [Salads]   \n","\n","                             cuisine  \\\n","0               Southern & Soul Food   \n","1                           American   \n","2                           American   \n","3     American, Southern & Soul Food   \n","4                           American   \n","...                              ...   \n","7127                            Thai   \n","7128                            Thai   \n","7129                     Asian, Thai   \n","7130                  Barbecue, Thai   \n","7131                            Thai   \n","\n","                                            ingredients  \n","0     [buttermilk cornbread, sandwich bread, salt, b...  \n","1     [light mayonnaise, lemon juice, cayenne pepper...  \n","2     [elbow macaroni, hellmann' or best food real m...  \n","3     [hellmann' or best food real mayonnais, lemon ...  \n","4     [lean ground turkey, hot sauce, ranch-style se...  \n","...                                                 ...  \n","7127  [garlic cloves, thai chile, salt, sugar, fish ...  \n","7128  [sauce, fish sauce, cilantro, lime, peanuts, c...  \n","7129  [lobster, vegetable oil, asian, fish, lime rin...  \n","7130  [fresh lime juice, palm sugar, fish sauce, gar...  \n","7131  [water, rice vinegar, green onions, reduced fa...  \n","\n","[7132 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-f0b24a61-8d5e-42d0-aa8b-996231b371a4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American, Southern &amp; Soul Food</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7127</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","    </tr>\n","    <tr>\n","      <th>7128</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","    </tr>\n","    <tr>\n","      <th>7129</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Asian, Thai</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>Thai-Green-Papaya-Salad-_Som-Tam_-1266284</td>\n","      <td>Thai Green Papaya Salad (Som Tam)</td>\n","      <td>4</td>\n","      <td>1200.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>Barbecue, Thai</td>\n","      <td>[fresh lime juice, palm sugar, fish sauce, gar...</td>\n","    </tr>\n","    <tr>\n","      <th>7131</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7132 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0b24a61-8d5e-42d0-aa8b-996231b371a4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f0b24a61-8d5e-42d0-aa8b-996231b371a4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f0b24a61-8d5e-42d0-aa8b-996231b371a4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["''' the number of recipes per cuisine '''\n","query = \"SELECT cuisine, count(recipeName) as num_rcps_pr_csn FROM yum GROUP BY cuisine ORDER BY num_rcps_pr_csn DESC\"\n","cuisine_recipes = sqldf(query)\n","print(cuisine_recipes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0dth2cEmrMH-","executionInfo":{"status":"ok","timestamp":1680770010520,"user_tz":-120,"elapsed":200,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"6d40b8e4-276c-49ac-b7b0-ef6636aac89a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                          cuisine  num_rcps_pr_csn\n","0                                           Asian              536\n","1                                         Italian              411\n","2                                        American              399\n","3                                           Greek              385\n","4                                  Cajun & Creole              373\n","..                                            ...              ...\n","192  American, Southern & Soul Food, Kid-Friendly                1\n","193                   American, Hungarian, French                1\n","194                      American, Chinese, Asian                1\n","195     American, Barbecue, Mexican, Southwestern                1\n","196                            American, Barbecue                1\n","\n","[197 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["''' we are going to create a new dictionary for the cuisines '''\n","\n","new_dict={'American'\t:\t'American'\t,\n","'American, Asian'\t:\t'American, Asian'\t,\n","'American, Barbecue'\t:\t'Barbecue, American'\t,\n","'American, Barbecue, Mexican, Southwestern'\t:\t'Southwestern, American, Mexican'\t,\n","'American, Cajun & Creole'\t:\t'Cajun & Creole, American'\t,\n","'American, Cajun & Creole, Southern & Soul Food'\t:\t'Cajun & Creole, Southern & Soul Food, American'\t,\n","'American, Chinese'\t:\t'American, Chinese'\t,\n","'American, Chinese, Asian'\t:\t'American, Chinese, Asian'\t,\n","'American, Cuban'\t:\t'American, Cuban'\t,\n","'American, English'\t:\t'American, English'\t,\n","'American, French'\t:\t'American, French'\t,\n","'American, German'\t:\t'American, German'\t,\n","'American, Greek, Mediterranean'\t:\t'American, Greek, Mediterranean'\t,\n","'American, Hawaiian'\t:\t'Hawaiian, American'\t,\n","'American, Hungarian'\t:\t'American, Hungarian'\t,\n","'American, Hungarian, French'\t:\t'American, Hungarian, French'\t,\n","'American, Irish'\t:\t'American, Irish'\t,\n","'American, Italian'\t:\t'American, Italian'\t,\n","'American, Kid-Friendly'\t:\t'American, Kid-Friendly'\t,\n","'American, Mediterranean'\t:\t'American, Mediterranean'\t,\n","'American, Mexican'\t:\t'American, Southwestern, Mexican'\t,\n","'American, Mexican, Southwestern'\t:\t'Southwestern, American, Mexican'\t,\n","'American, Mexican, Southwestern, Spanish'\t:\t'Southwestern, American, Mexican'\t,\n","'American, Moroccan'\t:\t'American, Moroccan'\t,\n","'American, Southern & Soul Food'\t:\t'Southern & Soul Food, American'\t,\n","'American, Southern & Soul Food, Kid-Friendly'\t:\t'Southern & Soul Food, American, Kid-Friendly'\t,\n","'American, Southwestern'\t:\t'Southwestern, American'\t,\n","'American, Southwestern, Spanish'\t:\t'Southwestern, American, Spanish'\t,\n","'American, Spanish'\t:\t'American, Spanish'\t,\n","'Asian'\t:\t'Asian'\t,\n","'Asian, Barbecue'\t:\t'Barbecue, Asian'\t,\n","'Asian, Barbecue, Japanese'\t:\t'Barbecue, Japanese'\t,\n","'Asian, Chinese'\t:\t'Chinese, Asian'\t,\n","'Asian, German'\t:\t'Asian, German'\t,\n","'Asian, Indian'\t:\t'Indian, Asian'\t,\n","'Asian, Japanese'\t:\t'Japanese, Asian'\t,\n","'Asian, Japanese, Kid-Friendly'\t:\t'Japanese, Asian, Kid-Friendly'\t,\n","'Asian, Mediterranean'\t:\t'Asian, Mediterranean'\t,\n","'Asian, Southwestern'\t:\t'Southwestern, American, Mexican'\t,\n","'Asian, Thai'\t:\t'Thai, Asian'\t,\n","'Barbecue'\t:\t'Barbecue'\t,\n","'Barbecue, American'\t:\t'Barbecue, American'\t,\n","'Barbecue, Asian'\t:\t'Barbecue, Asian'\t,\n","'Barbecue, Cajun & Creole'\t:\t'Barbecue, Cajun & Creole'\t,\n","'Barbecue, Chinese'\t:\t'Barbecue, Chinese'\t,\n","'Barbecue, Cuban'\t:\t'Barbecue, Cuban'\t,\n","'Barbecue, Greek'\t:\t'Barbecue, Greek'\t,\n","'Barbecue, Hawaiian'\t:\t'Barbecue, Hawaiian, American'\t,\n","'Barbecue, Hawaiian, American'\t:\t'Barbecue, Hawaiian, American'\t,\n","'Barbecue, Hawaiian, American, Kid-Friendly'\t:\t'Barbecue, Hawaiian, American, Kid-Friendly'\t,\n","'Barbecue, Indian'\t:\t'Barbecue, Indian, Asian'\t,\n","'Barbecue, Italian'\t:\t'Barbecue, Italian'\t,\n","'Barbecue, Japanese'\t:\t'Barbecue, Japanese, Asian'\t,\n","'Barbecue, Japanese, Asian'\t:\t'Barbecue, Japanese, Asian'\t,\n","'Barbecue, Kid-Friendly'\t:\t'Barbecue, Kid-Friendly'\t,\n","'Barbecue, Kid-Friendly, Greek'\t:\t'Barbecue, Kid-Friendly, Greek'\t,\n","'Barbecue, Mediterranean, American'\t:\t'Barbecue, Mediterranean, American'\t,\n","'Barbecue, Mediterranean, Greek'\t:\t'Barbecue, Mediterranean, Greek'\t,\n","'Barbecue, Mexican'\t:\t'Barbecue, Mexican'\t,\n","'Barbecue, Moroccan'\t:\t'Barbecue, Moroccan'\t,\n","'Barbecue, Portuguese'\t:\t'Barbecue, Portuguese'\t,\n","'Barbecue, Southwestern, American'\t:\t'Barbecue, Southwestern, American'\t,\n","'Barbecue, Spanish'\t:\t'Barbecue, Spanish'\t,\n","'Barbecue, Thai'\t:\t'Barbecue, Thai'\t,\n","'Barbecue, Thai, Asian'\t:\t'Barbecue, Thai, Asian'\t,\n","'Cajun & Creole'\t:\t'Cajun & Creole, American'\t,\n","'Cajun & Creole, American'\t:\t'Cajun & Creole, American'\t,\n","'Cajun & Creole, American, Cuban'\t:\t'Cajun & Creole, American, Cuban'\t,\n","'Cajun & Creole, American, French'\t:\t'Cajun & Creole, American, French'\t,\n","'Cajun & Creole, American, Kid-Friendly'\t:\t'Cajun & Creole, American, Kid-Friendly'\t,\n","'Cajun & Creole, Barbecue'\t:\t'Barbecue, Cajun & Creole, American'\t,\n","'Cajun & Creole, Barbecue, American'\t:\t'Barbecue, Cajun & Creole, American'\t,\n","'Cajun & Creole, Barbecue, Kid-Friendly'\t:\t'Barbecue, Cajun & Creole, American, Kid-Friendly'\t,\n","'Cajun & Creole, French'\t:\t'Cajun & Creole, American, French'\t,\n","'Cajun & Creole, Southern & Soul Food'\t:\t'Cajun & Creole, Southern & Soul Food, American'\t,\n","'Cajun & Creole, Southern & Soul Food, American'\t:\t'Cajun & Creole, Southern & Soul Food, American'\t,\n","'Cajun & Creole, Southern & Soul Food, American, French'\t:\t'Cajun & Creole, Southern & Soul Food, American, French'\t,\n","'Cajun & Creole, Southern & Soul Food, Portuguese, American'\t:\t'Cajun & Creole, Southern & Soul Food, Portuguese, American'\t,\n","'Cajun & Creole, Spanish'\t:\t'Cajun & Creole, American, Spanish'\t,\n","'Chinese'\t:\t'Chinese, Asian'\t,\n","'Chinese, Asian'\t:\t'Chinese, Asian'\t,\n","'Chinese, Asian, Kid-Friendly'\t:\t'Chinese, Asian, Kid-Friendly'\t,\n","'Chinese, Kid-Friendly'\t:\t'Chinese, Asian, Kid-Friendly'\t,\n","'Cuban'\t:\t'Cuban'\t,\n","'Cuban, Barbecue'\t:\t'Barbecue, Cuban'\t,\n","'Cuban, Kid-Friendly'\t:\t'Cuban, Kid-Friendly'\t,\n","'Cuban, Mexican'\t:\t'Cuban, Mexican'\t,\n","'Cuban, Mexican, Spanish'\t:\t'Cuban, Mexican, Spanish'\t,\n","'Cuban, Southern & Soul Food'\t:\t'Southern & Soul Food, American, Cuban'\t,\n","'Cuban, Spanish'\t:\t'Cuban, Spanish'\t,\n","'English'\t:\t'English'\t,\n","'English, American'\t:\t'American, English'\t,\n","'English, Kid-Friendly'\t:\t'English, Kid-Friendly'\t,\n","'French'\t:\t'French'\t,\n","'French, Kid-Friendly'\t:\t'French, Kid-Friendly'\t,\n","'French, Mediterranean'\t:\t'Mediterranean'\t,\n","'French, Portuguese'\t:\t'French'\t,\n","'French, Southern & Soul Food'\t:\t'Southern & Soul Food, American, French'\t,\n","'German'\t:\t'German'\t,\n","'German, American'\t:\t'German, American'\t,\n","'German, American, Asian'\t:\t'German, American, Asian'\t,\n","'German, American, Kid-Friendly'\t:\t'German, American, Kid-Friendly'\t,\n","'German, French'\t:\t'German, French'\t,\n","'German, Hungarian'\t:\t'German, Hungarian'\t,\n","'German, Irish'\t:\t'German, Irish'\t,\n","'German, Kid-Friendly'\t:\t'German, Kid-Friendly'\t,\n","'Greek'\t:\t'Greek'\t,\n","'Greek, American'\t:\t'Greek, American'\t,\n","'Greek, Kid-Friendly'\t:\t'Greek, Kid-Friendly'\t,\n","'Greek, Mediterranean'\t:\t'Greek'\t,\n","'Hawaiian'\t:\t'Hawaiian, American'\t,\n","'Hawaiian, American'\t:\t'Hawaiian, American'\t,\n","'Hawaiian, American, Asian'\t:\t'Hawaiian, American, Asian'\t,\n","'Hawaiian, American, Kid-Friendly'\t:\t'Hawaiian, American, Kid-Friendly'\t,\n","'Hawaiian, Asian'\t:\t'Hawaiian, American, Asian'\t,\n","'Hawaiian, Chinese, Asian'\t:\t'Hawaiian, American, Chinese, Asian'\t,\n","'Hawaiian, Indian, Asian'\t:\t'Hawaiian, American, Indian, Asian'\t,\n","'Hawaiian, Japanese, American'\t:\t'Hawaiian, American, Japanese, Asian'\t,\n","'Hawaiian, Kid-Friendly'\t:\t'Hawaiian, American, Kid-Friendly'\t,\n","'Hawaiian, Portuguese, Kid-Friendly'\t:\t'Hawaiian, American, Portuguese, Kid-Friendly'\t,\n","'Hawaiian, Southwestern, American, Indian'\t:\t'Hawaiian, American, Indian, Asian'\t,\n","'Hungarian'\t:\t'Hungarian'\t,\n","'Hungarian, Kid-Friendly'\t:\t'Hungarian, Kid-Friendly'\t,\n","'Indian'\t:\t'Indian, Asian'\t,\n","'Indian, Asian'\t:\t'Indian, Asian'\t,\n","'Indian, Mediterranean'\t:\t'Indian, Asian, Mediterranean'\t,\n","'Irish'\t:\t'Irish'\t,\n","'Irish, American'\t:\t'Irish, American'\t,\n","'Irish, English'\t:\t'Irish'\t,\n","'Irish, English, Kid-Friendly'\t:\t'Irish, Kid-Friendly'\t,\n","'Irish, Kid-Friendly'\t:\t'Irish, Kid-Friendly'\t,\n","'Italian'\t:\t'Italian'\t,\n","'Italian, American'\t:\t'Italian, American'\t,\n","'Italian, American, Kid-Friendly'\t:\t'Italian, American, Kid-Friendly'\t,\n","'Italian, Barbecue'\t:\t'Barbecue, Italian'\t,\n","'Italian, French'\t:\t'Italian, French'\t,\n","'Italian, Japanese'\t:\t'Italian'\t,\n","'Italian, Kid-Friendly'\t:\t'Italian, Kid-Friendly'\t,\n","'Italian, Mediterranean'\t:\t'Italian, Mediterranean'\t,\n","'Italian, Southwestern'\t:\t'American, Italian'\t,\n","'Japanese'\t:\t'Japanese, Asian'\t,\n","'Japanese, American, Asian'\t:\t'Japanese, American, Asian'\t,\n","'Japanese, Asian'\t:\t'Japanese, Asian'\t,\n","'Kid-Friendly'\t:\t'Kid-Friendly'\t,\n","'Mediterranean'\t:\t'Mediterranean'\t,\n","'Mediterranean, American'\t:\t'Mediterranean, American'\t,\n","'Mediterranean, German, Greek'\t:\t'Mediterranean, German, Greek'\t,\n","'Mediterranean, Greek'\t:\t'Greek'\t,\n","'Mediterranean, Greek, Asian'\t:\t'Mediterranean, Greek, Asian'\t,\n","'Mediterranean, Indian, Asian, Kid-Friendly'\t:\t'Indian, Asian, Mediterranean, Kid-Friendly'\t,\n","'Mediterranean, Moroccan'\t:\t'Mediterranean, Moroccan'\t,\n","'Mediterranean, Spanish'\t:\t'Mediterranean, Spanish'\t,\n","'Mediterranean, Spanish, American, French'\t:\t'Mediterranean, American'\t,\n","'Mexican'\t:\t'Mexican'\t,\n","'Mexican, Kid-Friendly'\t:\t'Mexican, Kid-Friendly'\t,\n","'Mexican, Southwestern'\t:\t'Southwestern, American, Mexican'\t,\n","'Mexican, Southwestern, Spanish'\t:\t'Southwestern, American, Mexican'\t,\n","'Mexican, Spanish'\t:\t'Mexican, Spanish'\t,\n","'Moroccan'\t:\t'Moroccan'\t,\n","'Moroccan, Indian'\t:\t'Moroccan, Indian, Asian'\t,\n","'Portuguese'\t:\t'Portuguese'\t,\n","'Portuguese, American'\t:\t'Portuguese, American'\t,\n","'Portuguese, French'\t:\t'Portuguese, French'\t,\n","'Portuguese, Kid-Friendly'\t:\t'Portuguese, Kid-Friendly'\t,\n","'Portuguese, Spanish'\t:\t'Spanish'\t,\n","'Southern & Soul Food'\t:\t'Southern & Soul Food, American'\t,\n","'Southern & Soul Food, American'\t:\t'Southern & Soul Food, American'\t,\n","'Southern & Soul Food, American, Cuban'\t:\t'Southern & Soul Food, American, Cuban'\t,\n","'Southern & Soul Food, American, Kid-Friendly'\t:\t'Southern & Soul Food, American, Kid-Friendly'\t,\n","'Southern & Soul Food, Barbecue, American'\t:\t'Barbecue, Southern & Soul Food, American'\t,\n","'Southern & Soul Food, Cuban'\t:\t'Southern & Soul Food, American, Cuban'\t,\n","'Southern & Soul Food, German, American'\t:\t'Southern & Soul Food, American, German'\t,\n","'Southern & Soul Food, Kid-Friendly'\t:\t'Southern & Soul Food, American, Kid-Friendly'\t,\n","'Southern & Soul Food, Southwestern'\t:\t'Southern & Soul Food, American'\t,\n","'Southwestern'\t:\t'Southwestern, American'\t,\n","'Southwestern, American'\t:\t'Southwestern, American'\t,\n","'Southwestern, American, Chinese, Asian'\t:\t'Southwestern, American, Chinese, Asian'\t,\n","'Southwestern, American, Mexican'\t:\t'Southwestern, American, Mexican'\t,\n","'Southwestern, Mexican'\t:\t'Southwestern, American, Mexican'\t,\n","'Southwestern, Mexican, Kid-Friendly'\t:\t'Southwestern, American, Mexican, Kid-Friendly'\t,\n","'Spanish'\t:\t'Spanish'\t,\n","'Spanish, American'\t:\t'American, Spanish'\t,\n","'Spanish, American, Cuban'\t:\t'Cuban, Mexican, Spanish'\t,\n","'Spanish, American, French'\t:\t'Spanish'\t,\n","'Spanish, American, Mexican'\t:\t'American, Southwestern, Mexican'\t,\n","'Spanish, Cuban'\t:\t'Spanish, Cuban'\t,\n","'Spanish, Italian'\t:\t'Spanish, Italian'\t,\n","'Spanish, Mexican'\t:\t'Mexican'\t,\n","'Spanish, Portuguese'\t:\t'Spanish, Portuguese'\t,\n","'Spanish, Portuguese, Italian'\t:\t'Spanish, Portuguese, Italian'\t,\n","'Spanish, Portuguese, Moroccan'\t:\t'Spanish, Portuguese, Moroccan'\t,\n","'Spanish, Southwestern, American'\t:\t'American, Spanish'\t,\n","'Spanish, Southwestern, American, Mexican'\t:\t'Southwestern, American, Mexican'\t,\n","'Spanish, Southwestern, Mexican'\t:\t'Southwestern, American, Mexican'\t,\n","'Swedish'\t:\t'Swedish'\t,\n","'Swedish, American'\t:\t'Swedish, American'\t,\n","'Swedish, French'\t:\t'Swedish, French'\t,\n","'Swedish, German'\t:\t'Swedish, German'\t,\n","'Swedish, Kid-Friendly'\t:\t'Swedish, Kid-Friendly'\t,\n","'Thai'\t:\t'Thai, Asian'\t,\n","'Thai, American, Asian'\t:\t'Thai, Asian, American'\t,\n","'Thai, Asian'\t:\t'Thai, Asian'\t,\n","'Thai, Chinese, Indian, Asian'\t:\t'Thai, Chinese, Indian, Asian'\t,\n","'Thai, Indian, Asian'\t:\t'Thai, Indian, Asian'\t,\n","'Thai, Kid-Friendly'\t:\t'Thai, Asian, Kid-Friendly'\t}"],"metadata":{"id":"zUR_n2oWNEnh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum['cuisine'] = yum['cuisine'].apply(lambda x: new_dict[x] if x in new_dict else x).reset_index(drop=True)"],"metadata":{"id":"yAqSoa_jb_qk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["query = \"SELECT cuisine, count(recipeName) as num_rcps_pr_csn FROM yum GROUP BY cuisine ORDER BY num_rcps_pr_csn DESC\"\n","cuisine_recipes = sqldf(query)\n","''' Now we have cuisines with very few recipes so we are going to filter\n","the cuisine stays if there are more than 20 recipes related to that cuisine '''\n","\n","the_cuisines=list(cuisine_recipes[cuisine_recipes['num_rcps_pr_csn']>20]['cuisine'])\n","# filter the data in yum\n","yum=yum[yum['cuisine'].isin(the_cuisines)].reset_index(drop=True)"],"metadata":{"id":"xBADML2UcuD-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"R46A0jB8cjUm","executionInfo":{"status":"ok","timestamp":1680770075606,"user_tz":-120,"elapsed":356,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"72df6026-0f7f-442c-a894-9d5cbdf3dfae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     id  \\\n","0                   Southern-Cornbread-Dressing-1357820   \n","1               Disappearing-buffalo-chicken-dip-297712   \n","2                         Classic-macaroni-salad-304692   \n","3                               Classic-coleslaw-303481   \n","4     Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","...                                                 ...   \n","6736                    Thai-Coconut-Shrimp-Soup-901927   \n","6737                   Thai-Style-Broiled-Shrimp-779084   \n","6738                       Pad-Thai-French-Fries-984208   \n","6739                 Spicy-Thai-Lobster-Soup-My-Recipes   \n","6740   Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                                             recipeName  rating  \\\n","0                           Southern Cornbread Dressing       4   \n","1                      Disappearing Buffalo Chicken Dip       4   \n","2                                Classic Macaroni Salad       4   \n","3                                      Classic Coleslaw       4   \n","4     Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","...                                                 ...     ...   \n","6736                           Thai Coconut Shrimp Soup       3   \n","6737                          Thai-Style Broiled Shrimp       3   \n","6738                              Pad Thai French Fries       4   \n","6739                            Spicy Thai Lobster Soup       4   \n","6740                    Thai Salad with Peanut Dressing       4   \n","\n","      totalTimeInSeconds                 course  \\\n","0                 3600.0                    NaN   \n","1                 2100.0           [Appetizers]   \n","2                 1500.0  [Salads, Side Dishes]   \n","3                  600.0  [Salads, Side Dishes]   \n","4                 1380.0          [Main Dishes]   \n","...                  ...                    ...   \n","6736              1500.0                [Soups]   \n","6737               600.0                    NaN   \n","6738              1800.0                    NaN   \n","6739              3300.0   [Main Dishes, Soups]   \n","6740               900.0               [Salads]   \n","\n","                             cuisine  \\\n","0     Southern & Soul Food, American   \n","1                           American   \n","2                           American   \n","3     Southern & Soul Food, American   \n","4                           American   \n","...                              ...   \n","6736                     Thai, Asian   \n","6737                     Thai, Asian   \n","6738                     Thai, Asian   \n","6739                     Thai, Asian   \n","6740                     Thai, Asian   \n","\n","                                            ingredients  \n","0     [buttermilk cornbread, sandwich bread, salt, b...  \n","1     [light mayonnaise, lemon juice, cayenne pepper...  \n","2     [elbow macaroni, hellmann' or best food real m...  \n","3     [hellmann' or best food real mayonnais, lemon ...  \n","4     [lean ground turkey, hot sauce, ranch-style se...  \n","...                                                 ...  \n","6736  [olive oil, large shrimp, carrots, garlic, gin...  \n","6737  [garlic cloves, thai chile, salt, sugar, fish ...  \n","6738  [sauce, fish sauce, cilantro, lime, peanuts, c...  \n","6739  [lobster, vegetable oil, asian, fish, lime rin...  \n","6740  [water, rice vinegar, green onions, reduced fa...  \n","\n","[6741 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-e7ddc09f-8059-4db5-b5c1-534502f7342c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>Thai-Coconut-Shrimp-Soup-901927</td>\n","      <td>Thai Coconut Shrimp Soup</td>\n","      <td>3</td>\n","      <td>1500.0</td>\n","      <td>[Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[olive oil, large shrimp, carrots, garlic, gin...</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai, Asian</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6741 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7ddc09f-8059-4db5-b5c1-534502f7342c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e7ddc09f-8059-4db5-b5c1-534502f7342c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e7ddc09f-8059-4db5-b5c1-534502f7342c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["the_cuisines"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NbxWOQTEbN4B","executionInfo":{"status":"ok","timestamp":1680770082278,"user_tz":-120,"elapsed":215,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"3ffe09d0-d3c5-4b41-a49a-9b4543fad196"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Asian',\n"," 'Thai, Asian',\n"," 'Greek',\n"," 'Japanese, Asian',\n"," 'Cajun & Creole, American',\n"," 'Italian',\n"," 'American',\n"," 'Indian, Asian',\n"," 'Spanish',\n"," 'Hungarian',\n"," 'Mexican',\n"," 'French',\n"," 'Cuban',\n"," 'Chinese, Asian',\n"," 'Portuguese',\n"," 'Barbecue',\n"," 'German',\n"," 'Irish',\n"," 'Moroccan',\n"," 'Southern & Soul Food, American',\n"," 'Mediterranean',\n"," 'Hawaiian, American',\n"," 'Swedish',\n"," 'Southwestern, American',\n"," 'Southwestern, American, Mexican',\n"," 'Cajun & Creole, Southern & Soul Food, American']"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["## Cleaning ingredient"],"metadata":{"id":"y155q0kyX7Gw"}},{"cell_type":"code","source":["yum"],"metadata":{"id":"4IYejbRab9Nf","colab":{"base_uri":"https://localhost:8080/","height":641},"executionInfo":{"status":"ok","timestamp":1680770096122,"user_tz":-120,"elapsed":739,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"a4eec4fd-5115-483a-f2e4-24e720d3cf07"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     id  \\\n","0                   Southern-Cornbread-Dressing-1357820   \n","1               Disappearing-buffalo-chicken-dip-297712   \n","2                         Classic-macaroni-salad-304692   \n","3                               Classic-coleslaw-303481   \n","4     Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","...                                                 ...   \n","6736                    Thai-Coconut-Shrimp-Soup-901927   \n","6737                   Thai-Style-Broiled-Shrimp-779084   \n","6738                       Pad-Thai-French-Fries-984208   \n","6739                 Spicy-Thai-Lobster-Soup-My-Recipes   \n","6740   Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                                             recipeName  rating  \\\n","0                           Southern Cornbread Dressing       4   \n","1                      Disappearing Buffalo Chicken Dip       4   \n","2                                Classic Macaroni Salad       4   \n","3                                      Classic Coleslaw       4   \n","4     Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","...                                                 ...     ...   \n","6736                           Thai Coconut Shrimp Soup       3   \n","6737                          Thai-Style Broiled Shrimp       3   \n","6738                              Pad Thai French Fries       4   \n","6739                            Spicy Thai Lobster Soup       4   \n","6740                    Thai Salad with Peanut Dressing       4   \n","\n","      totalTimeInSeconds                 course  \\\n","0                 3600.0                    NaN   \n","1                 2100.0           [Appetizers]   \n","2                 1500.0  [Salads, Side Dishes]   \n","3                  600.0  [Salads, Side Dishes]   \n","4                 1380.0          [Main Dishes]   \n","...                  ...                    ...   \n","6736              1500.0                [Soups]   \n","6737               600.0                    NaN   \n","6738              1800.0                    NaN   \n","6739              3300.0   [Main Dishes, Soups]   \n","6740               900.0               [Salads]   \n","\n","                             cuisine  \\\n","0     Southern & Soul Food, American   \n","1                           American   \n","2                           American   \n","3     Southern & Soul Food, American   \n","4                           American   \n","...                              ...   \n","6736                     Thai, Asian   \n","6737                     Thai, Asian   \n","6738                     Thai, Asian   \n","6739                     Thai, Asian   \n","6740                     Thai, Asian   \n","\n","                                            ingredients  \n","0     [buttermilk cornbread, sandwich bread, salt, b...  \n","1     [light mayonnaise, lemon juice, cayenne pepper...  \n","2     [elbow macaroni, hellmann' or best food real m...  \n","3     [hellmann' or best food real mayonnais, lemon ...  \n","4     [lean ground turkey, hot sauce, ranch-style se...  \n","...                                                 ...  \n","6736  [olive oil, large shrimp, carrots, garlic, gin...  \n","6737  [garlic cloves, thai chile, salt, sugar, fish ...  \n","6738  [sauce, fish sauce, cilantro, lime, peanuts, c...  \n","6739  [lobster, vegetable oil, asian, fish, lime rin...  \n","6740  [water, rice vinegar, green onions, reduced fa...  \n","\n","[6741 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-3ed0adc6-5dbe-4b85-9387-b8a0a247e696\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>Thai-Coconut-Shrimp-Soup-901927</td>\n","      <td>Thai Coconut Shrimp Soup</td>\n","      <td>3</td>\n","      <td>1500.0</td>\n","      <td>[Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[olive oil, large shrimp, carrots, garlic, gin...</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai, Asian</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6741 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ed0adc6-5dbe-4b85-9387-b8a0a247e696')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3ed0adc6-5dbe-4b85-9387-b8a0a247e696 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3ed0adc6-5dbe-4b85-9387-b8a0a247e696');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["def split_ingr(x):\n","    wnl=WordNetLemmatizer()\n","    cleanlist=[]\n","    lst = x.strip('[]').split(',')\n","    cleanlist=[' '.join(wnl.lemmatize(word.lower()) for word in word_tokenize(re.sub('[^a-zA-Z]',' ',item))) for item in lst]\n","    return cleanlist\n","'''----------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n","#remove low-information words from ingredients, could use more\n","def remove_word(word):\n","    alist =['low fat', 'reduced fat', 'fat free', 'fatfree', 'nonfat','gluten free', 'free range',\\\n","            'reduced sodium', 'salt free','sodium free', 'low sodium', 'sweetened','unsweetened','large','extra large','oz ','light']\n","    for item in alist:\n","        word = word.replace(item,'')\n","    return word\n","'''----------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n","# After renoving some words we have empty spaces, so we eliminate them\n","def remove_extra_spaces(clean_ingredients):\n","  aux=[]\n","  for cl_ingr in clean_ingredients:\n","    if cl_ingr in ('', ' '):\n","      pass\n","    else:\n","      aux.append(cl_ingr.strip())\n","  # aux=' '.join(aux).split()\n","  return aux\n","\n","'''----------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n","# Function to separate the values of the dictionary \",\" because for example 'alfredo sauce': ['parmesan cheese, butter'] it thinks that ['parmesan cheese, butter'] is just one element\n","def split_dic_values(dic):\n","  new_dic = {}\n","  for key in dic.keys():\n","    items=dic[key][0].split(',')\n","    aux=[]\n","    for ingredient in items:\n","      aux.append(ingredient.strip())\n","    new_dic[key] = aux\n","  return new_dic\n","\n","'''----------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n","# takes the new clean ingredients column and the dictionary in order to map them, to replace ingredients to more common ingredients, for example \"chicken stock\" to \"chicken broth\"\n","def mapping_to_dict(list_new_clean_ingredients, diccionario):\n","  aux=[]\n","  for cl_ingr in list_new_clean_ingredients:\n","    if cl_ingr in list(diccionario.keys()):\n","      aux.append(diccionario[cl_ingr])\n","    else:\n","      aux.append(cl_ingr)\n","  return aux\n","'''----------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n","# After applying the mapping to the ingredients we have a set of lists of lists, like \"[['corn', 'bread'], ['white bread'], 'salt', 'black pepper']\" \n","def flatten_lists(lst):\n","  result = []\n","  for item in lst:\n","    if isinstance(item, list):\n","        result.extend(flatten_lists(item))\n","    else:\n","        result.append(item)\n","  # this is to eliminate any duplicates that could emerged from flattening the list\n","  result=list(set(result))\n","  return result"],"metadata":{"id":"BK7zmvdxb9K9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# First part cleaning"],"metadata":{"id":"RU6X53k8LmKL"}},{"cell_type":"code","source":["# clean the ingredients of any weird character\n","yum['clean ingredients'] = yum['ingredients'].apply(lambda x: split_ingr(x)).reset_index(drop=True)\n","# remove the words that are unnecesary\n","yum['new_clean_ingredients'] = yum['clean ingredients'].apply(lambda x:[remove_word(word) for word in x]).reset_index(drop=True)\n","# clean the strings that are empty\n","yum['new_clean_ingredients'] = yum['new_clean_ingredients'].apply(lambda x:remove_extra_spaces(x)).reset_index(drop=True)\n"],"metadata":{"id":"4SXAygDTnwC-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Dictionary cleaning"],"metadata":{"id":"dhwKOLaqLqUl"}},{"cell_type":"code","source":["'''  df_new_ingr is an auxiliary excel that gives us the mapping of some of the ingredients that don't match to the database of the paper\n","so we can have the right connection between the recipee ingredients and the segmentation of ingredients and flavors \n","We followed this instructions for publish\n","https://pythoninoffice.com/how-to-read-google-sheet-into-pandas/ '''\n","df_new_ingr=pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQ0o3J-bgNKnQCLf8L0oAvlPrAsvmN6Jy88IZ_FIX1gdsbPpEVpwU1NKdZURrGgq8lXyvMpcUYqN2TP/pub?output=csv')\n","df_new_ingr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"hYf_OD0ToQDy","executionInfo":{"status":"ok","timestamp":1680770296688,"user_tz":-120,"elapsed":1303,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"d4aa5581-588a-4c32-c772-6baaab0aa2f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  ingredients  \\\n","0            active dry yeast   \n","1       aged balsamic vinegar   \n","2         aged cheddar cheese   \n","3                    albacore   \n","4      albacore tuna in water   \n","...                       ...   \n","1075  yoghurt natural low fat   \n","1076                     yolk   \n","1077               yukon gold   \n","1078                     zest   \n","1079   zesty italian dressing   \n","\n","                                         new_ingredient  \n","0                                                 yeast  \n","1                                               vinegar  \n","2                                        cheddar cheese  \n","3                                                  tuna  \n","4                                                  tuna  \n","...                                                 ...  \n","1075                                             yogurt  \n","1076                                                egg  \n","1077                                             potato  \n","1078                                              lemon  \n","1079  black pepper,garlic,lime juice,mustard,olive o...  \n","\n","[1080 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-160a35ed-6836-43da-9614-d93151209461\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ingredients</th>\n","      <th>new_ingredient</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>active dry yeast</td>\n","      <td>yeast</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>aged balsamic vinegar</td>\n","      <td>vinegar</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>aged cheddar cheese</td>\n","      <td>cheddar cheese</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>albacore</td>\n","      <td>tuna</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>albacore tuna in water</td>\n","      <td>tuna</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>yoghurt natural low fat</td>\n","      <td>yogurt</td>\n","    </tr>\n","    <tr>\n","      <th>1076</th>\n","      <td>yolk</td>\n","      <td>egg</td>\n","    </tr>\n","    <tr>\n","      <th>1077</th>\n","      <td>yukon gold</td>\n","      <td>potato</td>\n","    </tr>\n","    <tr>\n","      <th>1078</th>\n","      <td>zest</td>\n","      <td>lemon</td>\n","    </tr>\n","    <tr>\n","      <th>1079</th>\n","      <td>zesty italian dressing</td>\n","      <td>black pepper,garlic,lime juice,mustard,olive o...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1080 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-160a35ed-6836-43da-9614-d93151209461')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-160a35ed-6836-43da-9614-d93151209461 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-160a35ed-6836-43da-9614-d93151209461');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["''' Now we have to make a dictionary, the idea is that we will replace in the yum dataframe the column \"clean ingredients\"\n","with the new values that we have in the df_new_ingr in the column df_new_ingr \n","\n","https://sparkbyexamples.com/pandas/pandas-convert-dataframe-to-dictionary/#:~:text=To%20convert%20pandas%20DataFrame%20to%20Dictionary%20object%2C%20use%20to_dict(),()%20returns%20in%20this%20format.\n","'''\n","# Using dict() and zip() methods\n","dic_new_ingr = dict([(i,[x]) for i,x in zip(df_new_ingr['ingredients'], df_new_ingr['new_ingredient'])])\n","\n","dic_new_ingr=split_dic_values(dic_new_ingr)\n","print(dic_new_ingr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vIsQG-yzp1VC","executionInfo":{"status":"ok","timestamp":1680770300403,"user_tz":-120,"elapsed":241,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"fc75e7b2-f560-4116-cc06-808a6dc2a47a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'active dry yeast': ['yeast'], 'aged balsamic vinegar': ['vinegar'], 'aged cheddar cheese': ['cheddar cheese'], 'albacore': ['tuna'], 'albacore tuna in water': ['tuna'], 'ale': ['beer'], 'alfredo sauce': ['parmesan cheese', 'butter'], 'all beef hot dog': ['smoked sausage'], 'all purpose flour': ['whole grain wheat flour'], 'all purpose unbleached flour': ['whole grain wheat flour'], 'almond flour': ['almond', 'whole grain wheat flour'], 'anaheim chile': ['tabasco pepper'], 'ancho': ['tabasco pepper'], 'ancho chile pepper': ['tabasco pepper'], 'ancho chili ground pepper': ['tabasco pepper'], 'ancho powder': ['tabasco pepper'], 'anchovy': ['fish'], 'anchovy filet': ['fish'], 'anchovy fillet': ['fish'], 'anchovy paste': ['fish'], 'andouille sausage': ['smoked sausage'], 'andouille sausage link': ['smoked sausage'], 'angel food cake': ['white bread'], 'aonori': ['seaweed'], 'apple cider vinegar': ['vinegar'], 'applejack': ['alcoholic beverage'], 'applesauce': ['apple', 'cinnamon'], 'asadero': ['cheese'], 'asiago': ['cheese'], 'asian chile paste': ['tabasco pepper'], 'asian chili sauce': ['thai pepper'], 'asian dressing': ['garlic', 'honey', 'lime juice', 'sesame oil', 'sesame seed', 'vegetable oil'], 'assorted fresh vegetable': ['vegetable'], 'baby back rib': ['beef'], 'baby bok choy': ['chinese cabbage'], 'baby broccoli': ['broccoli'], 'baby portobello mushroom': ['mushroom'], 'baby spinach': ['dried spinach'], 'baby spinach leaf': ['dried spinach'], 'baby tatsoi': ['dried spinach'], 'bacardi gold': ['rum'], 'baguette': ['white bread'], 'baked tortilla chip': ['corn tortilla'], 'baking spray': ['vegetable oil'], 'balsamic reduction': ['vinager'], 'balsamic vinegar': ['vinegar'], 'balsamico bianco': ['vinegar'], 'barbecue rub': ['honey', 'lemon juice', 'tomato juice', 'vinegar'], 'barbecue sauce': ['honey', 'lemon juice', 'tomato juice', 'vinegar'], 'barilla pasta sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'barley flour': ['whole grain wheat flour'], 'barramundi': ['fish'], 'bass': ['fish'], 'bass fillet': ['fish'], 'bawang goreng': ['onion', 'vegetable oil', 'vinegar'], 'bbq sauce': ['honey', 'lemon juice', 'tomato juice', 'vinegar'], 'bechamel': ['butter', 'milk', 'nutmeg', 'parmesan cheese', 'whole grain wheat flour'], 'beef brisket': ['beef'], 'beef rib': ['beef'], 'beef rib roast': ['beef'], 'beef rib short': ['beef'], 'beef rib steak': ['beef'], 'beef sirloin': ['beef'], 'beef steak': ['beef'], 'beef tenderloin steak': ['beef'], 'bengal gram': ['chickpea'], 'beni shoga': ['ginger'], 'bertolli alfredo sauce': ['parmesan cheese', 'butter'], 'bertolli four chees rosa sauc': ['butter', 'cream', 'mozzarella cheese', 'parmesan cheese', 'provolone cheese', 'romano cheese'], 'bertolli vineyard premium collect marinara with burgundi wine sauc': ['garlic', 'olive oil', 'onion', 'oregano', 'parmesan cheese', 'tomato', 'red wine'], 'besan flour': ['whole grain wheat flour'], 'bird chile': ['tabasco pepper'], 'biryani masala': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg'], 'biscuit': ['butter', 'whole grain wheat flour', 'milk'], 'biscuit dough': ['butter', 'whole grain wheat flour', 'milk'], 'biscuit mix': ['butter', 'whole grain wheat flour', 'milk'], 'black gram': ['black bean'], 'black rice vinegar': ['vinegar'], 'black vinegar': ['vinegar'], 'blanched almond flour': ['whole grain wheat flour'], 'bloody mary mix': ['alcoholic beverage', 'black pepper', 'lemon juice', 'tomato juice'], 'bocconcini': ['cheese'], 'bok choy': ['chinese cabbage'], 'bolillo': ['bread'], 'bologna': ['smoked sausage'], 'bone broth': ['beef broth'], 'boneless': ['chicken'], 'boneless beef chuck': ['roasted beef'], 'boneless beef chuck eye roast': ['roasted beef'], 'boneless beef chuck pot roast': ['roasted beef'], 'boneless beef chuck roast': ['roasted beef'], 'boneless beef short rib': ['roasted beef'], 'boneless beef sirloin steak': ['roasted beef'], 'boneless beef top round steak': ['roasted beef'], 'boneless beef top sirloin steak': ['roasted beef'], 'boneless chuck roast': ['roasted beef'], 'boneless country pork rib': ['roasted beef'], 'boneless flank steak': ['roasted beef'], 'boneless rib eye steak': ['roasted beef'], 'boneless salmon fillet': ['salmon'], 'boneless sirloin steak': ['roasted beef'], 'bonito': ['fish'], 'bonito flake': ['fish'], 'bottom round roast': ['roasted beef'], 'bouillon': ['beef broth'], 'bouquet garni': ['bay laurel', 'dried parsley', 'thyme'], 'boy choy': ['chinese cabbage'], 'braising steak': ['beef'], 'bran flake': ['corn flake'], 'bread ciabatta': ['crisp bread'], 'bread crumb': ['bread'], 'bread crumb fresh': ['bread'], 'bread dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'bread flour': ['whole grain wheat flour'], 'bread machine yeast': ['yeast'], 'breadcrumb': ['bread'], 'breakfast sausage': ['smoked sausage'], 'breakfast steak': ['beef'], 'brewed espresso': ['coffee'], 'brill': ['fish'], 'brioche': ['white bread'], 'brioche bun': ['white bread'], 'brisket': ['veal'], 'broccoli': ['broccoli'], 'broccoli floret': ['broccoli'], 'broccoli rabe': ['broccoli'], 'broccoli slaw': ['broccoli'], 'broccoli stem': ['broccoli'], 'broccolini': ['broccoli'], 'brocolli floret': ['broccoli'], 'broth': ['beef broth'], 'brown rice flour': ['brown rice', 'whole grain wheat flour'], 'brown rice vinegar': ['vinegar'], 'bruschetta topping': ['basil', 'black bean', 'bread', 'garlic', 'olive oil', 'parmesan cheese', 'tomato', 'vinegar'], 'bulk italian sausag': ['beef'], 'bun': ['white bread'], 'burger': ['beef'], 'burger bun': ['white bread'], 'burrata': ['cheese'], 'butter cooking spray': ['butter'], 'butter flavored spray': ['butter'], 'butter margarine blend': ['butterfat'], 'buttercream frosting': ['butter', 'milk', 'vanilla'], 'buttered toast': ['butter', 'white bread'], 'buttermilk ranch dressing': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'caesar salad dressing': ['black pepper', 'garlic', 'lemon juice', 'mustard', 'parmesan cheese'], 'cajun seasoning': ['black pepper', 'cayenne', 'garlic', 'onion', 'oregano', 'thyme'], 'cajun spice mix': ['black pepper', 'cayenne', 'garlic', 'onion', 'oregano', 'thyme'], 'cake flour': ['whole grain wheat flour'], 'calabaza': ['zucchini'], 'calamari': ['squid'], 'calamari ring': ['squid'], 'calimyrna': ['fig'], 'canola': ['vegetable oil'], 'canola oil': ['vegetable oil'], 'cantal': ['cheese'], 'capocollo': ['cured pork'], 'cardamon': ['cardamom'], 'carnitas': ['pork'], 'celery rib': ['beef'], 'center cut salmon fillet': ['salmon'], 'chaat masala': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg'], 'challa': ['white bread'], 'champagne': ['champagne wine'], 'champagne vinegar': ['vinegar'], 'chana dal': ['chickpea'], 'channa dal': ['chickpea'], 'chanterelle': ['mushroom'], 'chardonnay': ['white wine'], 'chat masala': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg'], 'cheddar chees': ['cheddar cheese'], 'cheddar cheese': ['cheddar cheese'], 'chees fresco queso': ['cheese'], 'chees fresh mozzarella': ['mozzarella cheese'], 'chickpea flour': ['chickpea', 'whole grain wheat flour'], 'chile': ['tabasco pepper'], 'chile de arbol': ['tabasco pepper'], 'chile paste': ['tabasco pepper'], 'chile paste with garlic': ['tabasco pepper'], 'chile pepper': ['tabasco pepper'], 'chile powder': ['tabasco pepper'], 'chile sauce': ['tabasco pepper'], 'chilean sea bass': ['tabasco pepper'], 'chilean sea bass fillet': ['fish'], 'chilegarlic sauce': ['tabasco pepper'], 'chili': ['tabasco pepper'], 'chili bean': ['kidney bean', 'tabasco pepper'], 'chili bean paste': ['thai pepper'], 'chili bean sauce': ['thai pepper'], 'chili flake': ['tabasco pepper', 'thai pepper'], 'chili garlic paste': ['tabasco pepper', 'thai pepper', 'garlic'], 'chili oil': ['vegetable oil', 'thai pepper'], 'chili paste': ['tamarind', 'thai pepper'], 'chili paste with garlic': ['tamarind', 'thai pepper', 'garlic'], 'chili pepper': ['tabasco pepper'], 'chili pepper flake': ['tabasco pepper'], 'chili powder': ['tabasco pepper'], 'chili sauce': ['tabasco pepper'], 'chili seasoning': ['tabasco pepper'], 'chilli': ['tabasco pepper'], 'chilli paste': ['tabasco pepper'], 'chinese black bean': ['tabasco pepper', 'black bean'], 'chinese black vinegar': ['vinegar'], 'chinese rice vinegar': ['vinegar'], 'chinese rice wine': ['wine'], 'chinese sausage': ['smoked sausage'], 'chinese sesame paste': ['sesame oil', 'sesame seed'], 'chinese spinach': ['dried spinach'], 'chinkiang vinegar': ['vinegar'], 'chip plain tortilla': ['corn tortilla'], 'chipotle chile': ['tabasco pepper'], 'chipotle chile powder': ['tabasco pepper'], 'cholent': ['beef', 'black pepper', 'cayenne', 'chicken broth', 'cumin', 'dried kidney bean', 'egg', 'garlic', 'onion', 'potato', 'turmeric'], 'cholula hot sauce': ['tabasco pepper'], 'chop green chilies': ['tabasco pepper'], 'chopped fresh herb': ['bay laurel', 'dried parsley', 'thyme'], 'chopped green chilies': ['tabasco pepper'], 'chorizo': ['cured pork'], 'chorizo sausage': ['cured pork'], 'chourico': ['cured pork'], 'choy sum': ['chinese cabbage'], 'chuck': ['beef'], 'chuck roast': ['beef'], 'chuck steak': ['beef'], 'chunk feta': ['feta cheese'], 'chunky pasta sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'chunky salsa': ['garlic', 'onion', 'tabasco pepper', 'tomato'], 'chutney': ['cardamom', 'cayenne', 'clove', 'coriander', 'cumin', 'garlic', 'ginger', 'mango', 'turmeric'], 'ciabatta': ['crisp bread'], 'ciabatta bun': ['crisp bread'], 'ciabatta loaf': ['crisp bread'], 'ciabatta roll': ['crisp bread'], 'cider vinegar': ['vinegar'], 'cilantro pesto': ['basil', 'black pepper', 'garlic', 'olive oil', 'parmesan cheese', 'cilantro'], 'coarse semolina': ['oat groat'], 'coconut flour': ['coconut', 'whole grain wheat flour'], 'colby jack cheese': ['emmental cheese'], 'cole slaw mix': ['cabbage'], 'coleslaw': ['cabbage'], 'collard green': ['cabbage'], 'cooked italian meatball': ['beef'], 'cooked meatball': ['beef'], 'cooking fat': ['vegetable oil'], 'cooking green': ['cabbage'], 'cooking oil': ['vegetable oil'], 'cooking spray': ['vegetable oil'], 'cool whip': ['cream'], 'corn flour': ['corn', 'whole grain wheat flour'], 'cornflakes': ['corn flake'], 'cornmeal': ['corn grit'], 'cotija': ['cheese'], 'cr me fra che': ['cream'], 'crabmeat': ['crab'], 'crawfish': ['fish'], 'creamed spinach': ['dried spinach'], 'crema': ['cream'], 'crema mexican': ['cream'], 'creole seasoning': ['basil', 'black pepper', 'cayenne', 'garlic', 'oregano', 'thyme'], 'creole spice mix': ['basil', 'black pepper', 'cayenne', 'garlic', 'oregano', 'thyme'], 'creole style seasoning': ['basil', 'black pepper', 'cayenne', 'garlic', 'oregano', 'thyme'], 'crepe': ['butter', 'egg', 'milk', 'mushroom'], 'crescent roll': ['white bread'], 'cress': ['watercress'], 'crisco': ['butterfat'], 'crisco pure canola oil': ['vegetable oil'], 'crisco shortening': ['butterfat'], 'crisp cooked and crumbled': ['bacon'], 'croissant dough': ['butter', 'whole grain wheat flour', 'milk', 'yeast'], 'crouton': ['bread'], 'crumb': ['bread'], 'crumb crust': ['bread'], 'crystal hot sauce': ['tabasco pepper', 'vinegar'], 'cube steak': ['beef'], 'cubed pancetta': ['cured pork'], 'culantro': ['cilantro'], 'cura ao': ['alcoholic beverage'], 'curd': ['butter', 'egg', 'lemon juice'], 'cured chorizo': ['cured pork'], 'curly leaf spinach': ['dried spinach'], 'curry': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'curry leaf': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'curry paste': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'curry powder': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'curry sauce': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'cut into italian loaf': ['white bread'], 'daikon': ['radish'], 'daiya cheddar cheese': ['cheddar cheese'], 'dal': ['chickpea'], 'dark leafy green': ['dried spinach', 'kale', 'turnip'], 'dark soy sauce': ['soy sauce'], 'dashi kombu': ['seaweed'], 'deer': ['meat'], 'deli roll': ['white bread'], 'demi baguette': ['white bread'], 'dhal': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg', 'dried spinach', 'garlic', 'ginger', 'lemon juice', 'lentil', 'olive oil', 'onion', 'tomato', 'turmeric'], 'diced green chilies': ['thai pepper'], 'diced tomato and green chilies': ['tomato tabasco pepper'], 'dillweed': ['dill'], 'dinner roll': ['white bread'], 'dogfish': ['fish'], 'dole classic romaine': ['lettuce'], 'doubanjiang': ['sesame oil', 'soy sauce', 'thai pepper'], 'dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'dried bonito flake': ['fish'], 'dried chile': ['tabasco pepper'], 'dried chile pepper': ['tabasco pepper'], 'dried dillweed': ['dill'], 'dried mixed herb': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme'], 'dried red chile pepper': ['tabasco pepper'], 'dried strawberry': ['strawberry'], 'dried thai chili': ['thai pepper'], 'dry bread crumb': ['bread'], 'dry vermouth': ['alcoholic beverage'], 'dry yeast': ['yeast'], 'edamame': ['soybean'], 'edamame bean': ['soybean'], 'egg yolk': ['egg'], 'elderflower cordial': ['alcoholic beverage'], 'emmenthal': ['emmental cheese'], 'enchilada sauce': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'english muffin': ['bread'], 'enokitake': ['mushroom'], 'escarole': ['endive'], 'espresso': ['coffee'], 'espresso powder': ['coffee'], 'extra sharp cheddar cheese': ['cheddar cheese'], 'extra sharp white cheddar cheese': ['cheddar cheese'], 'eye of round roast': ['roasted beef'], 'fajita seasoning mix': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'fajita size flour tortilla': ['corn tortilla'], 'fast rising yeast': ['yeast'], 'fat free feta cheese': ['feta cheese'], 'feta': ['feta cheese'], 'feta cheese': ['feta cheese'], 'feta cheese crumbles': ['feta cheese'], 'filet': ['fish'], 'filet mignon': ['pork'], 'fillet': ['raw fish'], 'fillet red snapper': ['fish'], 'filo dough': ['olive oil', 'vinegar', 'whole grain wheat flour'], 'fine grind white cornmeal': ['corn grit'], 'finnan haddie': ['fish'], 'fishcake': ['bay', 'bread', 'cod', 'egg', 'lemon', 'milk', 'onion', 'parsley', 'potato', 'vegetable oil', 'whole grain wheat flour'], 'flank steak': ['beef'], 'flat iron steak': ['beef'], 'flatbread': ['butter', 'milk', 'whole grain wheat flour'], 'flavored oil': ['vegetable oil'], 'flounder fillet': ['fish'], 'flour': ['whole grain wheat flour'], 'flour for dusting': ['whole grain wheat flour'], 'flour tortilla': ['corn tortilla'], 'focaccia': ['olive oil', 'rosemary', 'whole grain wheat flour', 'yeast'], 'fontina': ['cheese'], 'fontina cheese': ['cheese'], 'french baguette': ['white bread'], 'french fry': ['french fried potato'], 'french roll': ['white bread'], 'french sandwich roll': ['white bread'], 'fresh chevre': ['goat cheese'], 'fresh chile': ['tabasco pepper'], 'fresh chorizo': ['cured pork'], 'fresh curry': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'fresh curry leaf': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'fresh express heart of romaine': ['lettuce'], 'fresh herb': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme'], 'fresh mozzarella': ['mozzarella cheese'], 'fresh mozzarella ball': ['mozzarella cheese'], 'fresh parmesan cheese': ['parmesan cheese'], 'fresh red chili': ['thai pepper'], 'fresh salmon': ['salmon'], 'fresh seafood': ['octopus', 'oyster', 'shrimp', 'squid'], 'fresh spinach': ['dried spinach'], 'fresh spinach leaf': ['dried spinach'], 'fresh veget': ['vegetable'], 'fresh yeast': ['yeast'], 'freshly grated parmesan': ['parmesan cheese'], 'fresno chile': ['tabasco pepper'], 'fromage blanc': ['cream cheese'], 'frozen bread dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'frozen broccoli': ['broccoli'], 'frozen chopped spinach': ['dried spinach'], 'frozen edamame bean': ['soybean'], 'frozen hash brown': ['black pepper', 'egg', 'onion', 'potato', 'vegetable oil', 'whole grain wheat flour'], 'frozen lemonade concentrate': ['lemon juice'], 'frozen limeade concentrate': ['lemon juice'], 'frozen meatball': ['beef'], 'frozen pastry puff sheet': ['whole grain wheat flour'], 'frozen shelled edamame': ['soybean'], 'frozen spinach': ['dried spinach'], 'frozen strawberry': ['strawberry'], 'furikake': ['fish', 'seaweed', 'sesame seed', 'soy sauce'], 'gai choy': ['chinese cabbage'], 'gai lan': ['broccoli'], 'galangal': ['galanga'], 'garam masala': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg'], 'garden cress': ['watercress'], 'garden of eatin tortilla chip': ['corn tortilla'], 'garlic and herb seasoning': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme', 'garlic'], 'garlic chili sauce': ['thai pepper', 'garlic'], 'garlic herb feta': ['feta cheese'], 'genoa salami': ['cured pork'], 'ghee': ['butter'], 'giblet': ['meat'], 'gingerroot': ['ginger'], 'gluten flour': ['whole grain wheat flour'], 'gluten free all purpose flour': ['whole grain wheat flour'], 'gluten free breadcrumb': ['bread'], 'gluten free flour': ['whole grain wheat flour'], 'gluten free hoisin sauce': ['soybean', 'sweet potato', 'sesame seed', 'garlic', 'whole grain wheat flour', 'thai pepper'], 'gluten free oat flour': ['whole grain wheat flour'], 'gluten free soy sauce': ['soy sauce'], 'gluten free tamari': ['tamarind'], 'glutinous rice flour': ['rice', 'whole grain wheat flour'], 'gochugaru': ['thai pepper'], 'gochujang base': ['honey', 'sake', 'thai pepper', 'vinegar'], 'gold medal all purpose flour': ['whole grain wheat flour'], 'gorgonzola': ['cheese'], 'gorgonzola dolce': ['cheese'], 'gouda': ['cheese'], 'graham flour': ['whole grain wheat flour'], 'gram flour': ['whole grain wheat flour'], 'grana padano': ['cheese'], 'grand marnier': ['alcoholic beverage'], 'granola': ['cinnamon', 'coconut oil', 'honey', 'oat', 'pecan'], 'granola cereal': ['cinnamon', 'coconut oil', 'honey', 'oat', 'pecan'], 'grated cotija': ['cheese'], 'grated jack cheese': ['emmental cheese'], 'grated parmesan cheese': ['parmesan cheese'], 'grated parmesan romano': ['parmesan cheese'], 'grated pecorino': ['cheese'], 'graviera': ['cheese'], 'gravlax': ['dill', 'salmon'], 'greek dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'greek feta': ['feta cheese'], 'greek seasoning': ['basil', 'black pepper', 'dill', 'garlic', 'onion', 'oregano'], 'greek style vinaigrette': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'green chile': ['tabasco pepper'], 'green chile sauce': ['tabasco pepper'], 'green chilies': ['thai pepper'], 'green curry paste': ['cayenne', 'cilantro', 'galanga', 'garlic', 'lime', 'onion', 'shrimp', 'thai pepper', 'coriander', 'turmeric', 'cumin', 'cayenne'], 'green enchilada sauce': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'green pesto': ['basil', 'black pepper', 'garlic', 'olive oil', 'parmesan cheese'], 'green plantain': ['banana'], 'grenadine': ['alcoholic beverage'], 'grit': ['toasted oat'], 'grit quick': ['toasted oat'], 'ground bison': ['meat'], 'ground chile': ['tabasco pepper'], 'ground chipotle chile pepper': ['tabasco pepper'], 'ground chuck': ['beef'], 'ground italian sausage': ['smoked sausage'], 'ground sausage': ['smoked sausage'], 'ground sirloin': ['beef'], 'ground tumeric': ['turmeric'], 'groundnut': ['peanut'], 'guacamole': ['avocado', 'cilantro', 'garlic', 'lemon', 'onion', 'tabasco pepper', 'tomato'], 'guajillo chile': ['tabasco pepper'], 'guanciale': ['bacon'], 'half half': ['cream'], 'halibut': ['fish'], 'halibut fillet': ['fish'], 'halibut steak': ['beef'], 'halloumi': ['cheese'], 'hamburger': ['beef'], 'hamburger bun': ['white bread'], 'hamburger patty': ['white bread'], 'hanger steak': ['beef'], 'hard roll': ['white bread'], 'hard salami': ['cured pork'], 'harissa': ['bell pepper', 'caraway seed', 'coriander', 'cumin', 'fennel', 'garlic', 'lemon juice', 'olive oil', 'tomato'], 'harissa paste': ['bell pepper', 'caraway seed', 'coriander', 'cumin', 'fennel', 'garlic', 'lemon juice', 'olive oil', 'tomato'], 'harissa sauce': ['bell pepper', 'caraway seed', 'coriander', 'cumin', 'fennel', 'garlic', 'lemon juice', 'olive oil', 'tomato'], 'hash brown': ['black pepper', 'egg', 'onion', 'potato', 'vegetable oil', 'whole grain wheat flour'], 'hash brown patty': ['black pepper', 'egg', 'onion', 'potato', 'vegetable oil', 'whole grain wheat flour'], 'hatch green chile': ['tabasco pepper'], 'hawaiian roll': ['white bread'], 'heart of romaine': ['lettuce'], 'herb': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme'], 'herb dressing': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme', 'olive oil', 'vinager'], 'herb seasoned stuffing': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme'], 'herb seasoning': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme'], 'herbes de provence': ['basil', 'bay laurel', 'chervil', 'fennel', 'marjoram', 'oregano', 'rosemary', 'tarragon', 'thyme'], 'hidden valley original ranch salad dressing seasoning mix': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'hoagi or roll': ['white bread'], 'hoagie bun': ['crisp bread'], 'hoagie roll': ['white bread'], 'hoisin sauce': ['soybean', 'sweet potato', 'sesame seed', 'garlic', 'whole grain wheat flour', 'thai pepper'], 'hollandaise sauce': ['butter', 'cayenne', 'egg', 'lemon juice', 'mustard'], 'hominy': ['corn'], 'hot chili': ['tabasco pepper', 'thai pepper'], 'hot chili oil': ['vegetable oil', 'thai pepper'], 'hot chili powder': ['tabasco pepper'], 'hot dog': ['smoked sausage'], 'hot dog bun': ['white bread'], 'hot dog roll': ['smoked sausage', 'white bread'], 'hot italian sausage': ['smoked sausage'], 'hot salsa': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'hot sauce': ['tabasco pepper', 'vinegar'], 'hot sausage': ['smoked sausage'], 'hummus': ['chickpea', 'cumin', 'garlic', 'lime juice', 'olive oil'], 'iceberg': ['lettuce'], 'iceberg lettuce': ['lettuce'], 'in juic natur pineappl slice': ['pineapple'], 'india pale ale': ['beer'], 'instant yeast': ['yeast'], 'irish red ale': ['beer'], 'italian herb': ['basil', 'dried parsley', 'garlic', 'oregano', 'rosemary', 'thyme'], 'italian pizza crust': ['olive oil', 'whole grain wheat flour', 'yeast'], 'italian salad dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'italian salad dressing mix': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'italian sausage': ['smoked sausage'], 'italian seasoned breadcrumb': ['bread'], 'italian seasoning': ['basil', 'dried parsley', 'garlic', 'oregano', 'rosemary', 'thyme'], 'italian style meatball': ['beef'], 'italian style seasoning': ['basil', 'dried parsley', 'garlic', 'oregano', 'rosemary', 'thyme'], 'jack': ['emmental cheese'], 'jack cheese': ['emmental cheese'], 'jagermeister liqueur': ['alcoholic beverage'], 'jalapeno chilies': ['tabasco pepper'], 'japanese rice vinegar': ['vinegar'], 'japanese soy sauce': ['soy sauce'], 'jarlsberg': ['cheese'], 'jeera': ['cumin'], 'jelli strawberri': ['strawberry juice'], 'johnnie walker black label': ['scotch whiskey'], 'johnsonville andouille': ['smoked sausage'], 'johnsonville andouille fully cooked sausage': ['smoked sausage'], 'kabuli channa': ['chickpea'], 'kahlua': ['alcoholic beverage'], 'kaiser roll': ['white bread'], 'kalamata': ['olive'], 'kamaboko': ['fish'], 'kasuri methi': ['fenugreek'], 'kc masterpiece original barbecue sauce': ['honey', 'lemon juice', 'tomato juice', 'vinegar'], 'kerrygold aged cheddar cheese': ['cheddar cheese'], 'kidney': ['meat'], 'kielbasa': ['smoked sausage'], 'kitchen bouquet': ['bay laurel', 'dried parsley', 'thyme'], 'kizami nori': ['seaweed'], 'knockwurst': ['smoked sausage'], 'kraft milk shredded sharp cheddar cheese': ['cheddar cheese'], 'labneh': ['yogurt'], 'lager': ['beer'], 'lardons': ['bacon'], 'large egg yolk': ['egg'], 'laughing cow': ['cheese'], 'leg quarter': ['chicken'], 'lemon curd': ['butter', 'egg', 'lemon juice'], 'lemonade': ['lemon juice'], 'light pepper jack cheese': ['emmental cheese'], 'light soy sauce': ['soy sauce'], 'linguica': ['smoked sausage'], 'liqueur': ['alcoholic beverage'], 'loin': ['pork'], 'london broil': ['roasted beef'], 'long green chili pepper': ['tabasco pepper'], 'louisiana hot sauce': ['tabasco pepper', 'vinegar'], 'low fat cheddar chees': ['cheddar cheese'], 'low fat feta': ['feta cheese'], 'low fat part skim ricotta chees': ['cheese'], 'low fat ricotta': ['cheese'], 'low fat ricotta cheese': ['cheese'], 'low fat sharp cheddar cheese': ['cheddar cheese'], 'low moisture mozzarella': ['mozzarella cheese'], 'low sodium soy sauce': ['soy sauce'], 'low sodium taco seasoning': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'lower sodium soy sauce': ['soy sauce'], 'lox': ['salmon'], 'madras curry powder': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'mahi mahi': ['fish'], 'mahi mahi fillet': ['fish'], 'mahimahi': ['fish'], 'mango chutney': ['cardamom', 'cayenne', 'clove', 'coriander', 'cumin', 'garlic', 'ginger', 'mango', 'turmeric', 'mango'], 'maple flavored syrup': ['maple syrup'], 'margarine': ['butterfat'], 'margarita mix': ['tequila', 'lemon juice'], 'marinara sauce': ['garlic', 'olive oil', 'onion', 'oregano', 'parmesan cheese', 'tomato'], 'marzipan': ['almond', 'peanut'], 'masa harina': ['whole grain wheat flour'], 'masala': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg'], 'massaman curry paste': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'mccormick cajun seasoning': ['black pepper', 'cayenne', 'garlic', 'onion', 'oregano', 'thyme'], 'mccormick chili powder': ['tabasco pepper'], 'meatball': ['beef'], 'meatloaf': ['pork', 'roasted beef'], 'medium cheddar cheese': ['cheddar cheese'], 'medium curry powder': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'medium salsa': ['garlic', 'onion', 'tabasco pepper', 'tomato'], 'mentsuyu': ['fish', 'kelp', 'sake', 'soy sauce'], 'merlot': ['red wine'], 'merluza': ['fish'], 'methi': ['fenugreek'], 'mexican chorizo': ['cured pork'], 'mexican seasoning mix': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'mexicorn': ['corn'], 'microgreens': ['basil', 'beet', 'cabbage', 'celery', 'chervil', 'cilantro'], 'mild cheddar cheese': ['cheddar cheese'], 'mild curry powder': ['coriander', 'turmeric', 'cumin', 'cayenne'], 'mild green chile': ['tabasco pepper'], 'mild italian sausage': ['smoked sausage'], 'mild salsa': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'minestrone': ['bay', 'bean', 'black pepper', 'carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'pea', 'potato', 'squash', 'tomato juice', 'zucchini'], 'minute steak': ['beef'], 'mitsuba': ['parsley'], 'mixed green': ['dried spinach', 'lettuce'], 'mojo marinade': ['black pepper', 'garlic', 'lemon juice', 'onion', 'oregano'], 'monterey jack': ['emmental cheese'], 'montreal steak seasoning': ['beef'], 'montreal steak spice': ['beef'], 'moong dal': ['soybean'], 'mozzarella ball': ['mozzarella cheese'], 'mozzarella cheese': ['mozzarella cheese'], 'mr dash seasoning mix': ['basil', 'black pepper', 'carrot', 'celery', 'onion', 'oregano', 'parsley', 'thyme'], 'muesli': ['almond', 'cinnamon', 'coconut', 'cranberry', 'oat', 'pecan'], 'naan': ['butter', 'milk', 'whole grain wheat flour'], 'neufch tel': ['cheese'], 'neutral oil': ['vegetable oil'], 'new mexico red chile powder': ['tabasco pepper'], 'new york strip steak': ['beef'], 'new york style garlic parmesan panetini': ['bread'], 'new york style pita chip': ['butter', 'milk', 'whole grain wheat flour'], 'non dairy margarine': ['butterfat'], 'non stick spray': ['vegetable oil'], 'nonfat ricotta cheese': ['cheese'], 'nonhydrogenated margarine': ['butterfat'], 'nonstick spray': ['vegetable oil'], 'nori': ['seaweed'], 'nori flake': ['seaweed'], 'nori sheet': ['seaweed'], 'nutritional yeast': ['yeast'], 'ocean perch': ['fish'], 'oil': ['vegetable oil'], 'oil packed anchovy fillet': ['fish'], 'old el paso chopped green chile': ['tabasco pepper'], 'old el paso enchilada sauce': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'old el paso flour tortilla': ['corn tortilla'], 'old el paso green chile': ['tabasco pepper'], 'old el paso taco seasoning mix': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'old el paso thick n chunky salsa': ['garlic', 'onion', 'tabasco pepper', 'tomato'], 'old fashioned stone ground grit': ['toasted oat'], 'olive oil cooking spray': ['olive oil'], 'olive oil spray': ['olive oil'], 'olive tapenade': ['black pepper', 'garlic', 'lemon juice', 'olive', 'olive oil', 'parsley'], 'organicgirl baby spinach': ['dried spinach'], 'oxtail': ['beef'], 'oz frozen chopped spinach': ['dried spinach'], 'pak choi': ['chinese cabbage'], 'pale ale': ['beer'], 'pam cooking spray': ['vegetable oil'], 'panang curry paste': ['black pepper', 'cardamom', 'cinnamon', 'clove', 'coriander', 'cumin', 'fermented shrimp', 'galanga', 'kaffir lime', 'lemongrass', 'onion', 'peanut', 'star anise', 'thai pepper'], 'pancetta': ['cured pork'], 'paneer': ['cheese'], 'panko': ['bread'], 'panko breadcrumb': ['bread'], 'parmesan cheese': ['parmesan cheese'], 'parmigiana reggiano': ['parmesan cheese'], 'parmigiano reggiano cheese': ['parmesan cheese'], 'part skim mozzarella': ['mozzarella cheese'], 'part skim mozzarella cheese': ['mozzarella cheese'], 'part skim ricotta chees': ['cheese'], 'part skim ricotta cheese': ['cheese'], 'pasilla chile pepper': ['tabasco pepper'], 'passata': ['basil', 'olive oil', 'tomato'], 'pasta sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'pastina': ['parsnip'], 'pastrami': ['roasted beef'], 'pastry': ['whole grain wheat flour'], 'pastry dough': ['butter', 'whole grain wheat flour', 'yeast', 'egg', 'milk'], 'pastry flour': ['whole grain wheat flour'], 'pecorino romano cheese': ['cheese'], 'peperoncini': ['bell pepper'], 'pepper jack': ['emmental cheese'], 'peppercorn': ['pepper'], 'pepperidge farm puff pastry sheet': ['butter', 'whole grain wheat flour'], 'pepperocini': ['bell pepper'], 'pepperoncini': ['bell pepper'], 'pepperoni': ['cured pork'], 'pepperoni slice': ['cured pork'], 'perch': ['food'], 'perdue fit easy boneless': ['chicken'], 'perdue harvestland perfect portion boneless': ['chicken'], 'perdue perfect portion boneless': ['chicken'], 'pesto': ['basil', 'black pepper', 'garlic', 'olive oil', 'parmesan cheese'], 'pesto sauce': ['basil', 'black pepper', 'garlic', 'olive oil', 'parmesan cheese'], 'phyllo': ['olive oil', 'vinegar', 'whole grain wheat flour'], 'phyllo dough': ['olive oil', 'vinegar', 'whole grain wheat flour'], 'phyllo pastry': ['olive oil', 'vinegar', 'whole grain wheat flour'], 'picante sauce': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'pico de gallo': ['garlic', 'onion', 'tabasco pepper', 'tomato'], 'pie crust': ['butter', 'whole grain wheat flour'], 'pie dough': ['butter', 'whole grain wheat flour'], 'pie shell': ['butter', 'whole grain wheat flour'], 'piecrust': ['butter', 'whole grain wheat flour'], 'pillsbury crescent recipe creation refrigerated seamless dough sheet': ['butter', 'whole grain wheat flour', 'yeast'], 'pillsbury pie crust': ['butter', 'whole grain wheat flour'], 'pillsbury refrigerated crescent dinner roll': ['white bread'], 'pink salmon': ['salmon'], 'pinot grigio': ['white wine'], 'pita': ['butter', 'milk', 'whole grain wheat flour'], 'pita bread': ['butter', 'milk', 'whole grain wheat flour'], 'pita bread round': ['butter', 'milk', 'whole grain wheat flour'], 'pita chip': ['butter', 'milk', 'whole grain wheat flour'], 'pita pocket': ['butter', 'milk', 'whole grain wheat flour'], 'pita round': ['butter', 'milk', 'whole grain wheat flour'], 'pizza crust': ['olive oil', 'whole grain wheat flour', 'yeast'], 'pizza dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'pizza sauce': ['olive oil', 'whole grain wheat flour', 'yeast'], 'plain breadcrumb': ['bread'], 'plain dry bread crumb': ['bread'], 'plain flour': ['whole grain wheat flour'], 'plantain': ['banana'], 'plantain sweet': ['banana'], 'poblano chile': ['tabasco pepper'], 'poblano chilies': ['tabasco pepper'], 'poha': ['rice'], 'pomegranate vinegar': ['vinegar'], 'pompano': ['fish'], 'ponzu': ['fermented shrimp', 'lemon juice', 'lime juice', 'orange juice', 'soy sauce'], 'pork baby back rib': ['beef'], 'pork blade steak': ['pork'], 'pork country style rib': ['beef'], 'pork rib': ['beef'], 'pork rib chop': ['beef'], 'pork sirloin': ['pork'], 'pork sirloin chop': ['pork'], 'pork spare rib': ['beef'], 'pork sparerib': ['pork'], 'pork steak': ['pork'], 'port': ['red wine'], 'port wine': ['red wine'], 'porterhouse steak': ['beef'], 'portobello cap': ['mushroom'], 'portuguese roll': ['white bread'], 'posole': ['corn'], 'pot roast': ['roasted beef'], 'prebaked pizza crust': ['olive oil', 'whole grain wheat flour', 'yeast'], 'prego alfredo sauce': ['parmesan cheese', 'butter'], 'prego traditional italian sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'prepar pesto': ['basil', 'black pepper', 'garlic', 'olive oil', 'parmesan cheese'], 'prepar salsa': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'prepared coleslaw': ['cabbage'], 'prepared guacamole': ['avocado', 'cilantro', 'garlic', 'lemon', 'onion', 'tabasco pepper', 'tomato'], 'prepared pasta sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'prepared pie crust': ['butter', 'whole grain wheat flour'], 'prepared pizza crust': ['olive oil', 'whole grain wheat flour', 'yeast'], 'promise buttery spread': ['butterfat'], 'prosciutto': ['cured pork'], 'prosciutto cotto': ['cured pork'], 'prosciutto slice': ['cured pork'], 'puff pastry': ['butter', 'whole grain wheat flour'], 'puff pastry sheet': ['butter', 'whole grain wheat flour'], 'pure wesson canola oil': ['vegetable oil'], 'quail': ['meat'], 'queso fresco': ['cheese'], 'queso panela': ['cheese'], 'quickcooking grit': ['toasted oat'], 'ra el hanout': ['black pepper', 'cardamom', 'cinnamon', 'coriander', 'cumin', 'ginger', 'saffron', 'turmeric'], 'radicchio': ['chicory'], 'ragu': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'ragu cheesi classic alfredo sauc': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'ragu cheesy roasted garlic parmesan sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'ragu chunky sundried tomato sweet basil pasta sauce': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'ragu old world style pasta sauc': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'ragu old world style tradit pasta sauc': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'ragu organic pasta sauc': ['carrot', 'celery', 'garlic', 'olive oil', 'onion', 'parmesan cheese', 'red wine', 'roasted beef', 'thyme', 'tomato juice'], 'rainbow trout': ['fish'], 'raita': ['cumin', 'coriander', 'cardamom', 'black pepper', 'cinnamon', 'clove', 'nutmeg', 'cucumber', 'garlic', 'ginger', 'lime', 'mint', 'yogurt'], 'rajma': ['red bean'], 'ranch dressing': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'ranch style bean': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'ranch style seasoning': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'rapid rise yeast': ['yeast'], 'raspberry vinegar': ['vinegar'], 'red chile powder': ['tabasco pepper'], 'red chile sauce': ['tabasco pepper'], 'red chili pepper': ['tabasco pepper'], 'red chili powder': ['tabasco pepper'], 'red curry paste': ['garlic', 'thai pepper', 'lemongrass', 'fermented shrimp'], 'red drum': ['fish'], 'red enchilada sauce': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'red snapper': ['fish'], 'red sockeye': ['salmon'], 'red vinegar white white': ['vinegar'], 'red wine vinegar': ['vinegar'], 'reduced fat cheddar cheese': ['cheddar cheese'], 'reduced fat sharp cheddar cheese': ['cheddar cheese'], 'reduced fat shredded mozzarella cheese': ['mozzarella cheese'], 'reduced sodium soy sauce': ['soy sauce'], 'reduced sodium tamari sauce': ['tamarind'], 'refrigerated crescent roll': ['white bread'], 'refrigerated piecrusts': ['butter', 'whole grain wheat flour'], 'refrigerated pizza dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'regular soy sauce': ['soy sauce'], 'rib': ['beef'], 'rib eye roast': ['beef'], 'rib eye steak': ['beef'], 'rib pork chop': ['beef'], 'rib roast': ['veal'], 'rib rub': ['beef'], 'rice flour': ['rice', 'whole grain wheat flour'], 'rice vinegar': ['vinegar'], 'rice wine': ['wine'], 'ricotta': ['cheese'], 'ricotta cheese': ['cheese'], 'ricotta salata': ['cheese'], 'risotto': ['rice'], 'roast': ['roasted beef'], 'roll': ['white bread'], 'roquefort': ['roquefort cheese'], 'roquefort cheese': ['roquefort cheese'], 'round steak': ['beef'], 'ruby port': ['red wine'], 'rump roast': ['beef'], 'rump steak': ['beef'], 'rusk': ['bread'], 'safflower oil': ['vegetable oil'], 'salad': ['dried spinach', 'lettuce'], 'salad dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'salad green': ['dried spinach', 'lettuce'], 'salad oil': ['olive oil'], 'salami': ['cured pork'], 'salmon': ['salmon'], 'salmon fillet': ['salmon'], 'salmon roe': ['salmon'], 'salmon sashimi': ['salmon'], 'salmon steak': ['salmon'], 'sambal chile paste': ['thai pepper'], 'sambal ulek': ['thai pepper'], 'sandwich bun': ['white bread'], 'sandwich roll': ['white bread'], 'sandwich steak': ['beef'], 'sandwich thins': ['bread'], 'sardine': ['fish'], 'sausage': ['smoked sausage'], 'sausage link': ['smoked sausage'], 'sea bass fillet': ['fish'], 'sea bream': ['fish'], 'seafood': ['octopus', 'oyster', 'shrimp', 'squid'], 'seafood stock': ['octopus', 'oyster', 'shrimp', 'squid'], 'seasoned bread crumb': ['bread'], 'seasoned rice wine vinegar': ['vinegar'], 'seasoning mix': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano'], 'self raising flour': ['whole grain wheat flour'], 'self rising cornmeal': ['corn grit'], 'self rising flour': ['whole grain wheat flour'], 'semolina': ['oat groat'], 'semolina flour': ['oat groat'], 'serrano chile': ['tabasco pepper'], 'serrano chilies': ['tabasco pepper'], 'sesame': ['sesame seed'], 'sesame chili oil': ['sesame oil', 'thai pepper'], 'sesame paste': ['sesame oil', 'sesame seed'], 'shanghai bok choy': ['chinese cabbage'], 'shank': ['lamb'], 'sharp cheddar cheese': ['cheddar cheese'], 'sharp white cheddar cheese': ['cheddar cheese'], 'shaved parmesan cheese': ['parmesan cheese'], 'sherry vinegar': ['vinegar'], 'sherry wine vinegar': ['vinegar'], 'short rib': ['beef'], 'shoyu': ['soy sauce'], 'shredded cheddar cheese': ['cheddar cheese'], 'shredded coleslaw mix': ['cabbage'], 'shredded fontina': ['cheese'], 'shredded low fat cheddar cheese': ['cheddar cheese'], 'shredded lowfat monterey jack cheese': ['emmental cheese'], 'shredded mild cheddar cheese': ['cheddar cheese'], 'shredded monterey jack cheese': ['emmental cheese'], 'shredded mozzarella cheese': ['mozzarella cheese'], 'shredded nori': ['seaweed'], 'shredded parmesan cheese': ['parmesan cheese'], 'shredded pepper jack cheese': ['emmental cheese'], 'shredded reduced fat cheddar cheese': ['cheddar cheese'], 'shredded sharp cheddar cheese': ['cheddar cheese'], 'single crust pie': ['butter', 'whole grain wheat flour'], 'sirloin': ['beef'], 'sirloin steak': ['beef'], 'skin on salmon fillet': ['salmon'], 'skinless mahi mahi fillet': ['fish'], 'skinless salmon fillet': ['salmon'], 'skirt steak': ['beef'], 'slap ya mama cajun seasoning': ['black pepper', 'cayenne', 'garlic', 'onion', 'oregano', 'thyme'], 'slaw': ['cabbage'], 'slaw mix': ['cabbage'], 'slider bun': ['white bread'], 'slider roll': ['white bread'], 'small green chile': ['tabasco pepper'], 'smoked bratwurst': ['bacon', 'mushroom', 'onion', 'smoked sausage'], 'smoked cheddar cheese': ['cheddar cheese'], 'smoked gouda': ['cheese'], 'smoked kielbasa': ['smoked sausage'], 'smoked mozzarella': ['mozzarella cheese'], 'smoked salmon': ['salmon'], 'sofrito': ['carrot', 'celery', 'chive', 'garlic', 'onion', 'tomato'], 'soppressata': ['cured pork'], 'sourdough': ['bread'], 'sourdough baguette': ['white bread'], 'sourdough boule': ['white bread'], 'soy': ['soy sauce'], 'soy chorizo': ['cured pork'], 'soy sauce': ['soy sauce'], 'soy vay veri veri teriyaki marinade sauce': ['garlic', 'ginger', 'honey', 'soy sauce'], 'spam': ['pork sausage'], 'spanish chorizo': ['cured pork'], 'sparerib': ['pork'], 'speck': ['cured pork'], 'spicy barbecue sauce': ['honey', 'lemon juice', 'tomato juice', 'vinegar'], 'spicy bratwurst': ['bacon', 'mushroom', 'onion', 'smoked sausage'], 'spicy salami': ['cured pork'], 'spicy sausage': ['smoked sausage'], 'spinach': ['dried spinach'], 'spinach leaf': ['dried spinach'], 'spring mix': ['dried spinach', 'lettuce'], 'spring roll': ['white bread'], 'spring roll wrapper': ['white bread'], 'sprout': ['brussels sprout'], 'steak': ['beef'], 'steak salt': ['beef'], 'steak sauce': ['beef'], 'stewing steak': ['beef'], 'stock': ['beef broth'], 'stone ground cornmeal': ['corn grit'], 'stout': ['beer'], 'strong white bread flour': ['whole grain wheat flour'], 'summer sausage': ['smoked summer sausage'], 'sushi nori': ['seaweed'], 'sushi vinegar': ['vinegar'], 'swedish anchovy': ['fish'], 'sweet chili sauce': ['tamarind', 'thai pepper', 'garlic', 'vinegar', 'sugarcane'], 'sweet chorizo': ['cured pork'], 'sweet italian sausag link': ['smoked sausage'], 'sweet italian sausage': ['smoked sausage'], 'sweet mini bell': ['bell pepper'], 'sweet rice flour': ['rice', 'whole grain wheat flour'], 'sweet soy sauce': ['honey', 'soy sauce'], 'swordfish': ['fish'], 'swordfish fillet': ['fish'], 'swordfish steak': ['fish'], 'szechwan peppercorn': ['pepper'], 'taco bell thick chunky mild salsa': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'taco meat': ['beef'], 'taco sauce': ['bell pepper', 'garlic', 'onion', 'oregano', 'tabasco pepper', 'tomato'], 'taco seasoning': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'taco seasoning mix': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'taco seasoning reduced sodium': ['black pepper', 'cumin', 'garlic', 'onion', 'oregano', 'tabasco pepper'], 'taco shell': ['corn tortilla'], 'tamari': ['tamarind'], 'tamari sauce': ['tamarind'], 'tamari soy sauce': ['tamarind', 'soy sauce'], 'tamari tamari': ['tamarind'], 'tamarind': ['tamarind'], 'tamarind concentrate': ['tamarind'], 'tamarind extract': ['tamarind'], 'tamarind juice': ['tamarind'], 'tamarind paste': ['tamarind'], 'tamarind pulp': ['tamarind'], 'tamarind water': ['tamarind'], 'tandoori spice': ['black pepper', 'cardamom', 'cinnamon', 'clove', 'coriander', 'cumin', 'fenugreek', 'garlic', 'ginger', 'mace', 'nutmeg'], 'tapenade': ['black pepper', 'garlic', 'lemon juice', 'olive', 'olive oil', 'parsley'], 'tarragon vinegar': ['vinegar'], 'tart shell': ['butter', 'whole grain wheat flour'], 'tasajo': ['beef'], 'tasso': ['cured ham'], 'tawny port': ['red wine'], 'tenderloin roast': ['roasted beef'], 'tenderloin steak': ['beef'], 'teriyaki sauce': ['garlic', 'ginger', 'honey', 'soy sauce'], 'thai chile': ['thai pepper'], 'thai chili paste': ['thai pepper'], 'thai green curry paste': ['cayenne', 'cilantro', 'galanga', 'garlic', 'lime', 'onion', 'shrimp', 'thai pepper', 'coriander', 'turmeric', 'cumin', 'cayenne'], 'thai kitchen red curry paste': ['garlic', 'thai pepper', 'lemongrass', 'fermented shrimp'], 'thai red curry paste': ['garlic', 'thai pepper', 'lemongrass', 'fermented shrimp'], 'thin pizza crust': ['olive oil', 'whole grain wheat flour', 'yeast'], 'tilapia': ['fish'], 'tilapia fillet': ['fish'], 'toast': ['white bread'], 'toasted baguette': ['white bread'], 'toasted nori': ['seaweed'], 'toasted sesame dressing': ['garlic', 'honey', 'lime juice', 'sesame oil', 'sesame seed', 'vegetable oil'], 'tom yum paste': ['coconut oil', 'coriander', 'fermented shrimp', 'garlic', 'key lime leaf', 'lemongrass', 'onion', 'roasted shrimp', 'tamarind', 'thai pepper'], 'tony chachere s seasoning': ['basil', 'black pepper', 'cayenne', 'garlic', 'oregano', 'thyme'], 'toor dal': ['chickpea'], 'top round roast': ['roasted beef'], 'top round steak': ['beef'], 'top sirloin': ['beef'], 'top sirloin steak': ['beef'], 'torn romain lettuc leav': ['lettuce'], 'tortilla': ['corn tortilla'], 'tortilla chip': ['corn tortilla'], 'tortilla shell': ['corn tortilla'], 'tortilla strip': ['corn tortilla'], 'tostada': ['corn tortilla'], 'tostada shell': ['corn tortilla'], 'tri tip roast': ['beef'], 'triple sec': ['alcoholic beverage'], 'tumeric': ['turmeric'], 'tuna steak': ['tuna'], 'turkey hot dog': ['smoked sausage'], 'tzatziki sauce': ['cucumber', 'dill', 'garlic', 'lime juice', 'mint', 'olive oil', 'yogurt'], 'unagi': ['sake', 'soy sauce'], 'unagi sauce': ['sake', 'soy sauce'], 'unbaked pie crust': ['butter', 'whole grain wheat flour'], 'unbaked pie shell': ['butter', 'whole grain wheat flour'], 'unsalted beef stock': ['beef broth'], 'unsalted chicken stock': ['chicken broth'], 'unseasoned breadcrumb': ['bread'], 'urad dal': ['black bean'], 'usukuchi soy sauce': ['soy sauce'], 'vegan cheddar cheese': ['cheddar cheese'], 'vegan margarine': ['butterfat'], 'vegetable oil cooking spray': ['vegetable oil'], 'vegetable oil spray': ['vegetable oil'], 'veggie crumbles': ['black pepper', 'butter', 'carrot', 'cheese', 'corn', 'kale', 'leek', 'mushroom', 'oat groat', 'onion', 'pea', 'potato', 'squash', 'sweet potato', 'whole grain wheat flour'], 'velveeta': ['cheese'], 'venison': ['meat'], 'vermouth': ['alcoholic beverage'], 'vinaigrette': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar', 'honey'], 'vinaigrette dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar', 'honey'], 'vinegar': ['vinegar'], 'vodka': ['alcoholic beverage'], 'wakame': ['seaweed'], 'walleye': ['fish'], 'wheat free soy sauce': ['soy sauce'], 'wheel of brie': ['cheese'], 'white cheddar cheese': ['cheddar cheese'], 'white cornmeal': ['corn grit'], 'white distilled vinegar': ['vinegar'], 'white flour': ['whole grain wheat flour'], 'white peppercorn': ['pepper'], 'white rice vinegar': ['vinegar'], 'white vermouth': ['alcoholic beverage'], 'white vinegar': ['vinegar'], 'white wine vinegar': ['vinegar'], 'whole grain hamburger bun': ['white bread'], 'whole milk ricotta cheese': ['cheese'], 'whole milk yoghurt': ['yogurt'], 'whole peppercorn': ['pepper'], 'whole wheat baguette': ['white bread'], 'whole wheat bread dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'whole wheat bread flour': ['whole grain wheat flour'], 'whole wheat breadcrumb': ['bread'], 'whole wheat bun': ['wheat bread'], 'whole wheat flour': ['whole grain wheat flour'], 'whole wheat graham flour': ['whole grain wheat flour'], 'whole wheat hamburger bun': ['wheat bread'], 'whole wheat pastry flour': ['whole grain wheat flour'], 'whole wheat pita': ['butter', 'milk', 'whole grain wheat flour'], 'whole wheat pita bread round': ['butter', 'milk', 'whole grain wheat flour'], 'whole wheat pita pocket': ['butter', 'milk', 'whole grain wheat flour'], 'whole wheat pizza dough': ['olive oil', 'whole grain wheat flour', 'yeast'], 'whole wheat white flour': ['whole grain wheat flour'], 'wholemeal flour': ['whole grain wheat flour'], 'wild salmon': ['salmon'], 'wine vinegar': ['vinegar'], 'wish bone  italian dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone  ranch dressing': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'wish bone balsam vinaigrett dress': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone creamy caesar dressing': ['black pepper', 'garlic', 'lemon juice', 'mustard', 'parmesan cheese'], 'wish bone deluxe french dressing': ['mustard', 'olive oil', 'vinegar'], 'wish bone greek vinaigrette dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone guacamol ranch dress': ['avocado', 'cilantro', 'garlic', 'lemon', 'onion', 'tabasco pepper', 'tomato'], 'wish bone house italian dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone italian dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone light asian sesame ginger vinaigrette dressing': ['garlic', 'honey', 'lime juice', 'sesame oil', 'sesame seed', 'vegetable oil'], 'wish bone light balsamic basil vinaigrette dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone light ranch dressing': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'wish bone mediterranean italian vinaigrette dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone ranch dress': ['black pepper', 'buttermilk', 'chive', 'cream', 'dill', 'dried parsley', 'garlic', 'lemon', 'juice', 'onion'], 'wish bone red wine vinaigrett dress': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'wish bone robusto italian dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar'], 'yeast': ['yeast'], 'yellow curry paste': ['cilantro', 'ginger', 'lemongrass', 'onion', 'thai pepper', 'coriander', 'turmeric', 'cumin', 'cayenne'], 'yellowtail': ['fish'], 'yoghurt': ['yogurt'], 'yoghurt natural': ['yogurt'], 'yoghurt natural low fat': ['yogurt'], 'yolk': ['egg'], 'yukon gold': ['potato'], 'zest': ['lemon'], 'zesty italian dressing': ['black pepper', 'garlic', 'lime juice', 'mustard', 'olive oil', 'oregano', 'vinegar']}\n"]}]},{"cell_type":"code","source":["# apply the mapping to the yum dataframe\n","yum['new_clean_ingredients']=yum['new_clean_ingredients'].apply(lambda x:mapping_to_dict(x,dic_new_ingr)).reset_index(drop=True)\n","yum['new_clean_ingredients']=yum['new_clean_ingredients'].apply(lambda x:flatten_lists(x)).reset_index(drop=True)\n","yum"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":971},"id":"_HBrvlLh7u7J","executionInfo":{"status":"ok","timestamp":1680770312091,"user_tz":-120,"elapsed":1969,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"604730f9-ebf6-40ef-9feb-45528a7b0cd1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     id  \\\n","0                   Southern-Cornbread-Dressing-1357820   \n","1               Disappearing-buffalo-chicken-dip-297712   \n","2                         Classic-macaroni-salad-304692   \n","3                               Classic-coleslaw-303481   \n","4     Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","...                                                 ...   \n","6736                    Thai-Coconut-Shrimp-Soup-901927   \n","6737                   Thai-Style-Broiled-Shrimp-779084   \n","6738                       Pad-Thai-French-Fries-984208   \n","6739                 Spicy-Thai-Lobster-Soup-My-Recipes   \n","6740   Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                                             recipeName  rating  \\\n","0                           Southern Cornbread Dressing       4   \n","1                      Disappearing Buffalo Chicken Dip       4   \n","2                                Classic Macaroni Salad       4   \n","3                                      Classic Coleslaw       4   \n","4     Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","...                                                 ...     ...   \n","6736                           Thai Coconut Shrimp Soup       3   \n","6737                          Thai-Style Broiled Shrimp       3   \n","6738                              Pad Thai French Fries       4   \n","6739                            Spicy Thai Lobster Soup       4   \n","6740                    Thai Salad with Peanut Dressing       4   \n","\n","      totalTimeInSeconds                 course  \\\n","0                 3600.0                    NaN   \n","1                 2100.0           [Appetizers]   \n","2                 1500.0  [Salads, Side Dishes]   \n","3                  600.0  [Salads, Side Dishes]   \n","4                 1380.0          [Main Dishes]   \n","...                  ...                    ...   \n","6736              1500.0                [Soups]   \n","6737               600.0                    NaN   \n","6738              1800.0                    NaN   \n","6739              3300.0   [Main Dishes, Soups]   \n","6740               900.0               [Salads]   \n","\n","                             cuisine  \\\n","0     Southern & Soul Food, American   \n","1                           American   \n","2                           American   \n","3     Southern & Soul Food, American   \n","4                           American   \n","...                              ...   \n","6736                     Thai, Asian   \n","6737                     Thai, Asian   \n","6738                     Thai, Asian   \n","6739                     Thai, Asian   \n","6740                     Thai, Asian   \n","\n","                                            ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann' or best food real m...   \n","3     [hellmann' or best food real mayonnais, lemon ...   \n","4     [lean ground turkey, hot sauce, ranch-style se...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrots, garlic, gin...   \n","6737  [garlic cloves, thai chile, salt, sugar, fish ...   \n","6738  [sauce, fish sauce, cilantro, lime, peanuts, c...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onions, reduced fa...   \n","\n","                                      clean ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann or best food real ma...   \n","3     [hellmann or best food real mayonnais, lemon j...   \n","4     [lean ground turkey, hot sauce, ranch style se...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrot, garlic, ging...   \n","6737  [garlic clove, thai chile, salt, sugar, fish s...   \n","6738  [sauce, fish sauce, cilantro, lime, peanut, cr...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onion, reduced fat...   \n","\n","                                  new_clean_ingredients  \n","0     [buttermilk cornbread, butter, rubbed sage, ce...  \n","1     [mayonnaise, cayenne pepper sauce, lemon juice...  \n","2     [hellmann or best food real mayonnais, hellman...  \n","3     [hellmann or best food real mayonnais, green b...  \n","4     [bread, lemon, white bread, crumbled blue chee...  \n","...                                                 ...  \n","6736  [shrimp, lemongrass, olive oil, fresh cilantro...  \n","6737  [garlic clove, mint, peeled shrimp, sugar, lim...  \n","6738  [lemongrass, creamy peanut butter, fermented s...  \n","6739  [long grain rice, fresh cilantro, fresh lime j...  \n","6740  [purple onion, peeled fresh ginger, beansprout...  \n","\n","[6741 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-e5f724af-d29e-44c5-a7c8-ec645e758392\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","      <th>clean ingredients</th>\n","      <th>new_clean_ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, butter, rubbed sage, ce...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[mayonnaise, cayenne pepper sauce, lemon juice...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","      <td>[elbow macaroni, hellmann or best food real ma...</td>\n","      <td>[hellmann or best food real mayonnais, hellman...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","      <td>[hellmann or best food real mayonnais, lemon j...</td>\n","      <td>[hellmann or best food real mayonnais, green b...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","      <td>[lean ground turkey, hot sauce, ranch style se...</td>\n","      <td>[bread, lemon, white bread, crumbled blue chee...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>Thai-Coconut-Shrimp-Soup-901927</td>\n","      <td>Thai Coconut Shrimp Soup</td>\n","      <td>3</td>\n","      <td>1500.0</td>\n","      <td>[Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[olive oil, large shrimp, carrots, garlic, gin...</td>\n","      <td>[olive oil, large shrimp, carrot, garlic, ging...</td>\n","      <td>[shrimp, lemongrass, olive oil, fresh cilantro...</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","      <td>[garlic clove, thai chile, salt, sugar, fish s...</td>\n","      <td>[garlic clove, mint, peeled shrimp, sugar, lim...</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanut, cr...</td>\n","      <td>[lemongrass, creamy peanut butter, fermented s...</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[long grain rice, fresh cilantro, fresh lime j...</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai, Asian</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","      <td>[water, rice vinegar, green onion, reduced fat...</td>\n","      <td>[purple onion, peeled fresh ginger, beansprout...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6741 rows × 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5f724af-d29e-44c5-a7c8-ec645e758392')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e5f724af-d29e-44c5-a7c8-ec645e758392 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e5f724af-d29e-44c5-a7c8-ec645e758392');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["## Send clean data to save"],"metadata":{"id":"qUCnWNqxsKZe"}},{"cell_type":"code","source":["yum.to_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yummly_clean.pkl')"],"metadata":{"id":"Aik2mgbgsOw0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Mapping flavors"],"metadata":{"id":"6dfZYW6lscuL"}},{"cell_type":"code","source":["yum_lst = list(itertools.chain(*(yum['new_clean_ingredients'].tolist())))\n","yum_ingr = set(yum_lst)\n","print(len(yum_lst), len(yum_ingr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lTmGKSoaJAYs","executionInfo":{"status":"ok","timestamp":1680672498421,"user_tz":-120,"elapsed":589,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"d83728b1-1c84-4111-c1a3-300810e1a7e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["78491 2584\n"]}]},{"cell_type":"code","source":["# Read the components info from the paper\n","comp = pd.read_csv('/content/drive/Shareddrives/MLNS/Project/Codes/Data/comp_info.tsv',index_col=0,sep='\\t')\n","comp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"BULDqg7wKCeq","executionInfo":{"status":"ok","timestamp":1680672502484,"user_tz":-120,"elapsed":340,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"da5295c2-c636-43f0-b6e3-171bc465cfba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                              Compound name  CAS number\n","# id                                                   \n","0                                   jasmone    488-10-8\n","1                     5-methylhexanoic_acid    628-46-6\n","2                               l-glutamine     56-85-9\n","3     1-methyl-3-methoxy-4-isopropylbenzene   1076-56-8\n","4                 methyl-3-phenylpropionate    103-25-3\n","...                                     ...         ...\n","1102                             2-heptanol    543-49-7\n","1103                  1-octen-3-yl_butyrate  16491-54-6\n","1104                               guaiacol     90-05-1\n","1105        (+/?)-methyl_5-acetoxyhexanoate  35234-22-1\n","1106                          ethyl_sorbate   2396-84-1\n","\n","[1107 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-908cd45f-e501-402c-ad0b-6fd90c53c683\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Compound name</th>\n","      <th>CAS number</th>\n","    </tr>\n","    <tr>\n","      <th># id</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>jasmone</td>\n","      <td>488-10-8</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5-methylhexanoic_acid</td>\n","      <td>628-46-6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>l-glutamine</td>\n","      <td>56-85-9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1-methyl-3-methoxy-4-isopropylbenzene</td>\n","      <td>1076-56-8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>methyl-3-phenylpropionate</td>\n","      <td>103-25-3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1102</th>\n","      <td>2-heptanol</td>\n","      <td>543-49-7</td>\n","    </tr>\n","    <tr>\n","      <th>1103</th>\n","      <td>1-octen-3-yl_butyrate</td>\n","      <td>16491-54-6</td>\n","    </tr>\n","    <tr>\n","      <th>1104</th>\n","      <td>guaiacol</td>\n","      <td>90-05-1</td>\n","    </tr>\n","    <tr>\n","      <th>1105</th>\n","      <td>(+/?)-methyl_5-acetoxyhexanoate</td>\n","      <td>35234-22-1</td>\n","    </tr>\n","    <tr>\n","      <th>1106</th>\n","      <td>ethyl_sorbate</td>\n","      <td>2396-84-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1107 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-908cd45f-e501-402c-ad0b-6fd90c53c683')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-908cd45f-e501-402c-ad0b-6fd90c53c683 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-908cd45f-e501-402c-ad0b-6fd90c53c683');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# read the ingredients components from the paper\n","ingr_comp = pd.read_csv('/content/drive/Shareddrives/MLNS/Project/Codes/Data/ingr_comp.tsv',sep='\\t')\n","ingr_comp"],"metadata":{"id":"jYCeTAMnGtyg","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1680672506659,"user_tz":-120,"elapsed":528,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"1a691cb2-e632-4edb-d545-7b0cd849af34"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       # ingredient id  compound id\n","0                 1392          906\n","1                 1259          861\n","2                 1079          673\n","3                   22          906\n","4                  103          906\n","...                ...          ...\n","36776              876          657\n","36777              637          461\n","36778              689          650\n","36779              689          297\n","36780             1080           13\n","\n","[36781 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-b4b6dac1-e936-472b-be7b-893bbb59530a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th># ingredient id</th>\n","      <th>compound id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1392</td>\n","      <td>906</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1259</td>\n","      <td>861</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1079</td>\n","      <td>673</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>22</td>\n","      <td>906</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>103</td>\n","      <td>906</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>36776</th>\n","      <td>876</td>\n","      <td>657</td>\n","    </tr>\n","    <tr>\n","      <th>36777</th>\n","      <td>637</td>\n","      <td>461</td>\n","    </tr>\n","    <tr>\n","      <th>36778</th>\n","      <td>689</td>\n","      <td>650</td>\n","    </tr>\n","    <tr>\n","      <th>36779</th>\n","      <td>689</td>\n","      <td>297</td>\n","    </tr>\n","    <tr>\n","      <th>36780</th>\n","      <td>1080</td>\n","      <td>13</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>36781 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4b6dac1-e936-472b-be7b-893bbb59530a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4b6dac1-e936-472b-be7b-893bbb59530a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4b6dac1-e936-472b-be7b-893bbb59530a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# get the ingredients info from the paper\n","ingr = pd.read_csv('/content/drive/Shareddrives/MLNS/Project/Codes/Data/ingr_info.tsv',index_col=0,sep='\\t')\n","ingr['space ingredients']= ingr['ingredient name'].apply(lambda x: x.replace('_',' ') )\n","ingr_ingredients = set()\n","ingr['space ingredients'].map(lambda x: ingr_ingredients.add(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nfL0GMvz-0La","executionInfo":{"status":"ok","timestamp":1680672510531,"user_tz":-120,"elapsed":524,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"fc795712-3984-4a21-8fd0-93b098e18510"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["# id\n","0       None\n","1       None\n","2       None\n","3       None\n","4       None\n","        ... \n","1525    None\n","1526    None\n","1527    None\n","1528    None\n","1529    None\n","Name: space ingredients, Length: 1530, dtype: object"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["ingr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"ADkPmIz7vWFa","executionInfo":{"status":"ok","timestamp":1680672513690,"user_tz":-120,"elapsed":218,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"190f7e1d-e662-48fe-9f09-fc7a79b6a51a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 ingredient name          category           space ingredients\n","# id                                                                          \n","0             magnolia_tripetala            flower          magnolia tripetala\n","1      calyptranthes_parriculata             plant   calyptranthes parriculata\n","2     chamaecyparis_pisifera_oil  plant derivative  chamaecyparis pisifera oil\n","3                       mackerel      fish/seafood                    mackerel\n","4         mimusops_elengi_flower            flower      mimusops elengi flower\n","...                          ...               ...                         ...\n","1525                 tobacco_oil  plant derivative                 tobacco oil\n","1526               cinnamon_leaf             plant               cinnamon leaf\n","1527                   green_tea  plant derivative                   green tea\n","1528      artemisia_porrecta_oil  plant derivative      artemisia porrecta oil\n","1529              munster_cheese             dairy              munster cheese\n","\n","[1530 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-a164306f-4b4c-4c26-a375-0c732a6431e3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ingredient name</th>\n","      <th>category</th>\n","      <th>space ingredients</th>\n","    </tr>\n","    <tr>\n","      <th># id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>magnolia_tripetala</td>\n","      <td>flower</td>\n","      <td>magnolia tripetala</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>calyptranthes_parriculata</td>\n","      <td>plant</td>\n","      <td>calyptranthes parriculata</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>chamaecyparis_pisifera_oil</td>\n","      <td>plant derivative</td>\n","      <td>chamaecyparis pisifera oil</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>mackerel</td>\n","      <td>fish/seafood</td>\n","      <td>mackerel</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>mimusops_elengi_flower</td>\n","      <td>flower</td>\n","      <td>mimusops elengi flower</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1525</th>\n","      <td>tobacco_oil</td>\n","      <td>plant derivative</td>\n","      <td>tobacco oil</td>\n","    </tr>\n","    <tr>\n","      <th>1526</th>\n","      <td>cinnamon_leaf</td>\n","      <td>plant</td>\n","      <td>cinnamon leaf</td>\n","    </tr>\n","    <tr>\n","      <th>1527</th>\n","      <td>green_tea</td>\n","      <td>plant derivative</td>\n","      <td>green tea</td>\n","    </tr>\n","    <tr>\n","      <th>1528</th>\n","      <td>artemisia_porrecta_oil</td>\n","      <td>plant derivative</td>\n","      <td>artemisia porrecta oil</td>\n","    </tr>\n","    <tr>\n","      <th>1529</th>\n","      <td>munster_cheese</td>\n","      <td>dairy</td>\n","      <td>munster cheese</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1530 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a164306f-4b4c-4c26-a375-0c732a6431e3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a164306f-4b4c-4c26-a375-0c732a6431e3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a164306f-4b4c-4c26-a375-0c732a6431e3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# with this we are replacing ingredients from the recipes, with ingredients that are actually in the flavor network\n","# by this we are eliminating all the ingredients that don't have a match to a flavor\n","def ingrediente_con_sabor(lst, df_dic):\n","    temp = set()\n","    for item in lst:\n","        if item in df_dic:\n","            temp.update(df_dic[item])\n","    return temp"],"metadata":{"id":"TdZ4tBkeO-Vo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Count missing ingredients after matching; salt, sugar, water and oil are not in the flavor network and thus don't count as missing\n","def faltan_ingre(receta, diccionario):\n","    contador = 0\n","    for ingrediente in receta:\n","        if ingrediente in diccionario:\n","            contador+=1\n","        elif 'salt' in ingrediente.split():\n","            contador+=1\n","        elif 'sugar' in ingrediente.split():\n","            contador+=1\n","        elif 'water' in ingrediente.split():\n","            contador+=1\n","        elif 'oil' in ingrediente.split():\n","            contador+=1\n","\n","    return len(receta) - contador"],"metadata":{"id":"wYVTjH5XO4vD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def limpiar_ingredientes(paper_ingr_ingredients,recipe_ingr, col):\n","  # df_ingr comes from yummy dataset\n","  df_ingr = set()\n","  recipe_ingr[col].map(lambda x: [df_ingr.add(i) for i in x])\n","  # divide the ingredients into a set that has one ingredient and another that has more than just one ingredient\n","  # they come from the paper_ingr dataframe that comes from the original database\n","  more_ingredients = list(filter(lambda x:' ' in x, paper_ingr_ingredients))\n","  one_ingredient = set(paper_ingr_ingredients) - set(more_ingredients)\n","  dict_of_ingr={}\n","  # checks item in more_ingredients\n","  # then for each ingredients from yummy, if the item from the original database is inside the string from yummy\n","  # then if the key hasn't been created, then create a key with the ingredient from yummy\n","  # and add the item (ingredient from the original database) to the dictionary\n","  # if the key is already there, then append the item from the original db to the one in yummy\n","  for item in more_ingredients:\n","      for key in df_ingr:\n","          if item in key:\n","              if key not in dict_of_ingr:\n","                  dict_of_ingr[key] = [item]\n","              else:\n","                  dict_of_ingr[key].append(item)\n","\n","  for item in one_ingredient:\n","      for key in df_ingr:\n","          if item in key.split():\n","              if key not in dict_of_ingr:\n","                  dict_of_ingr[key] = [item]\n","              else:\n","                  dict_of_ingr[key].append(item)\n","  \n","  diff_dic = df_ingr - set(dict_of_ingr.keys())\n","  print(f'The length of ingredients:{len(df_ingr)} ##### Matched ingredients:{len(dict_of_ingr.keys())} ##### Missed ingredients:{len(diff_dic)}')\n","  df_aux = recipe_ingr.copy()\n","  # count the missing\n","  df_aux['len_diff'] = df_aux['new_clean_ingredients'].apply(lambda x: faltan_ingre(x,dict_of_ingr))\n","  df_aux['match ingredients'] = df_aux['new_clean_ingredients'].apply(lambda x: ingrediente_con_sabor(x,dict_of_ingr))\n","  df_aux['len_match'] = df_aux['match ingredients'].apply(lambda x: len(x))\n","  #remove entries with less match ingredients or no matching ingr_ingredients\n","  df_aux_filter = df_aux[(df_aux['len_diff']<3) & (df_aux['len_match']!=0)]\n","  print(f'Dataframe shape before filtering:{df_aux.shape} ##### Dataframe shape after filtering:{df_aux_filter.shape}')\n","  # Extract unique ingredients and sort them\n","  unique_ingredients = sorted(set(ingredient for row in df_aux_filter['match ingredients'] for ingredient in row))\n","  # Create a new DataFrame with a column for each ingredient\n","  df_just_truefalse_ingr = pd.DataFrame({ingredient: df_aux_filter['match ingredients'].apply(lambda x: ingredient in x) for ingredient in unique_ingredients})\n","  df_recipe_truefalse_ingr = pd.merge(df_aux_filter, df_just_truefalse_ingr, left_index=True, right_index=True)\n","\n","  return df_recipe_truefalse_ingr, df_just_truefalse_ingr  \n"],"metadata":{"id":"ZcMVQlfRQbx-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum_ingr, yum_X = limpiar_ingredientes(ingr_ingredients, yum, 'new_clean_ingredients')\n","# here we have a reduction of the entries, since the recipees with few ingredients were eliminated"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vrZ0HbPukWXx","executionInfo":{"status":"ok","timestamp":1680672577193,"user_tz":-120,"elapsed":2060,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"ad518850-a136-4312-ea16-aefb10eaaaf6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The length of ingredients:2584 ##### Matched ingredients:1964 ##### Missed ingredients:620\n","Dataframe shape before filtering:(6741, 12) ##### Dataframe shape after filtering:(6473, 12)\n"]}]},{"cell_type":"code","source":["yum_ingr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"X7vfkrGkkhft","executionInfo":{"status":"ok","timestamp":1680672698125,"user_tz":-120,"elapsed":232,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"08fd5307-8030-4914-beaf-57caffafb211"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                    id  \\\n","0                  Southern-Cornbread-Dressing-1357820   \n","1              Disappearing-buffalo-chicken-dip-297712   \n","2                        Classic-macaroni-salad-304692   \n","3                              Classic-coleslaw-303481   \n","5                               Creamed-spinach-305542   \n","...                                                ...   \n","6736                   Thai-Coconut-Shrimp-Soup-901927   \n","6737                  Thai-Style-Broiled-Shrimp-779084   \n","6738                      Pad-Thai-French-Fries-984208   \n","6739                Spicy-Thai-Lobster-Soup-My-Recipes   \n","6740  Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                            recipeName  rating  totalTimeInSeconds  \\\n","0          Southern Cornbread Dressing       4              3600.0   \n","1     Disappearing Buffalo Chicken Dip       4              2100.0   \n","2               Classic Macaroni Salad       4              1500.0   \n","3                     Classic Coleslaw       4               600.0   \n","5                      Creamed Spinach       5              2700.0   \n","...                                ...     ...                 ...   \n","6736          Thai Coconut Shrimp Soup       3              1500.0   \n","6737         Thai-Style Broiled Shrimp       3               600.0   \n","6738             Pad Thai French Fries       4              1800.0   \n","6739           Spicy Thai Lobster Soup       4              3300.0   \n","6740   Thai Salad with Peanut Dressing       4               900.0   \n","\n","                     course                         cuisine  \\\n","0                       NaN  Southern & Soul Food, American   \n","1              [Appetizers]                        American   \n","2     [Salads, Side Dishes]                        American   \n","3     [Salads, Side Dishes]  Southern & Soul Food, American   \n","5             [Side Dishes]                        American   \n","...                     ...                             ...   \n","6736                [Soups]                     Thai, Asian   \n","6737                    NaN                     Thai, Asian   \n","6738                    NaN                     Thai, Asian   \n","6739   [Main Dishes, Soups]                     Thai, Asian   \n","6740               [Salads]                     Thai, Asian   \n","\n","                                            ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann' or best food real m...   \n","3     [hellmann' or best food real mayonnais, lemon ...   \n","5     [baby spinach, heavy cream, onions, garlic, un...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrots, garlic, gin...   \n","6737  [garlic cloves, thai chile, salt, sugar, fish ...   \n","6738  [sauce, fish sauce, cilantro, lime, peanuts, c...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onions, reduced fa...   \n","\n","                                      clean ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann or best food real ma...   \n","3     [hellmann or best food real mayonnais, lemon j...   \n","5     [baby spinach, heavy cream, onion, garlic, uns...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrot, garlic, ging...   \n","6737  [garlic clove, thai chile, salt, sugar, fish s...   \n","6738  [sauce, fish sauce, cilantro, lime, peanut, cr...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onion, reduced fat...   \n","\n","                                  new_clean_ingredients  len_diff  ...  \\\n","0     [egg, chicken stock, salt, sandwich bread, oni...         0  ...   \n","1     [cayenne pepper sauce, lemon juice, cooked chi...         1  ...   \n","2     [vinegar, elbow macaroni, ground black pepper,...         2  ...   \n","3     [carrot, salt, lemon juice, sugar, green bell ...         1  ...   \n","5     [garlic, dried spinach, onion, whole grain whe...         0  ...   \n","...                                                 ...       ...  ...   \n","6736  [ginger, carrot, shrimp, garlic, olive oil, sh...         1  ...   \n","6737  [garlic clove, salt, lime juice, cilantro, sug...         0  ...   \n","6738  [vinegar, garlic, peanut, cilantro, creamy pea...         1  ...   \n","6739  [lobster, chopped cilantro fresh, vegetable oi...         1  ...   \n","6740  [vinegar, baby carrot, green onion, dry roaste...         2  ...   \n","\n","     white wine  whitefish  whole grain wheat flour  wild rice   wine   wood  \\\n","0         False      False                    False      False  False  False   \n","1         False      False                    False      False  False  False   \n","2         False      False                    False      False   True  False   \n","3         False      False                    False      False  False  False   \n","5         False      False                     True      False  False  False   \n","...         ...        ...                      ...        ...    ...    ...   \n","6736      False      False                    False      False  False  False   \n","6737      False      False                    False      False  False  False   \n","6738      False      False                    False      False  False  False   \n","6739      False      False                    False      False  False  False   \n","6740      False      False                    False      False  False  False   \n","\n","        yam  yeast  yogurt  zucchini  \n","0     False  False   False     False  \n","1     False  False   False     False  \n","2     False  False   False     False  \n","3     False  False   False     False  \n","5     False  False   False     False  \n","...     ...    ...     ...       ...  \n","6736  False  False   False     False  \n","6737  False  False   False     False  \n","6738  False  False   False     False  \n","6739  False  False   False     False  \n","6740  False  False   False     False  \n","\n","[6473 rows x 385 columns]"],"text/html":["\n","  <div id=\"df-a62acd5b-fba0-4e96-9ec4-9c62bb3f00ed\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","      <th>clean ingredients</th>\n","      <th>new_clean_ingredients</th>\n","      <th>len_diff</th>\n","      <th>...</th>\n","      <th>white wine</th>\n","      <th>whitefish</th>\n","      <th>whole grain wheat flour</th>\n","      <th>wild rice</th>\n","      <th>wine</th>\n","      <th>wood</th>\n","      <th>yam</th>\n","      <th>yeast</th>\n","      <th>yogurt</th>\n","      <th>zucchini</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[egg, chicken stock, salt, sandwich bread, oni...</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[cayenne pepper sauce, lemon juice, cooked chi...</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","      <td>[elbow macaroni, hellmann or best food real ma...</td>\n","      <td>[vinegar, elbow macaroni, ground black pepper,...</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","      <td>[hellmann or best food real mayonnais, lemon j...</td>\n","      <td>[carrot, salt, lemon juice, sugar, green bell ...</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Creamed-spinach-305542</td>\n","      <td>Creamed Spinach</td>\n","      <td>5</td>\n","      <td>2700.0</td>\n","      <td>[Side Dishes]</td>\n","      <td>American</td>\n","      <td>[baby spinach, heavy cream, onions, garlic, un...</td>\n","      <td>[baby spinach, heavy cream, onion, garlic, uns...</td>\n","      <td>[garlic, dried spinach, onion, whole grain whe...</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>Thai-Coconut-Shrimp-Soup-901927</td>\n","      <td>Thai Coconut Shrimp Soup</td>\n","      <td>3</td>\n","      <td>1500.0</td>\n","      <td>[Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[olive oil, large shrimp, carrots, garlic, gin...</td>\n","      <td>[olive oil, large shrimp, carrot, garlic, ging...</td>\n","      <td>[ginger, carrot, shrimp, garlic, olive oil, sh...</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","      <td>[garlic clove, thai chile, salt, sugar, fish s...</td>\n","      <td>[garlic clove, salt, lime juice, cilantro, sug...</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanut, cr...</td>\n","      <td>[vinegar, garlic, peanut, cilantro, creamy pea...</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[lobster, chopped cilantro fresh, vegetable oi...</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai, Asian</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","      <td>[water, rice vinegar, green onion, reduced fat...</td>\n","      <td>[vinegar, baby carrot, green onion, dry roaste...</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6473 rows × 385 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a62acd5b-fba0-4e96-9ec4-9c62bb3f00ed')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a62acd5b-fba0-4e96-9ec4-9c62bb3f00ed button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a62acd5b-fba0-4e96-9ec4-9c62bb3f00ed');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["yum_X"],"metadata":{"id":"U_usfD4L__iy","executionInfo":{"status":"ok","timestamp":1680672707296,"user_tz":-120,"elapsed":291,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"colab":{"base_uri":"https://localhost:8080/","height":539},"outputId":"51c5a99f-3615-44d7-fb55-92534c0511a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      alcoholic beverage  almond  anise  anise seed  apple  apple juice  \\\n","0                  False   False  False       False  False        False   \n","1                  False   False  False       False  False        False   \n","2                  False   False  False       False  False        False   \n","3                  False   False  False       False  False        False   \n","5                  False   False  False       False  False        False   \n","...                  ...     ...    ...         ...    ...          ...   \n","6736               False   False  False       False  False        False   \n","6737               False   False  False       False  False        False   \n","6738               False   False  False       False  False        False   \n","6739               False   False  False       False  False        False   \n","6740               False   False  False       False  False        False   \n","\n","      apricot  artichoke  asparagus  avocado  ...  white wine  whitefish  \\\n","0       False      False      False    False  ...       False      False   \n","1       False      False      False    False  ...       False      False   \n","2       False      False      False    False  ...       False      False   \n","3       False      False      False    False  ...       False      False   \n","5       False      False      False    False  ...       False      False   \n","...       ...        ...        ...      ...  ...         ...        ...   \n","6736    False      False      False    False  ...       False      False   \n","6737    False      False      False    False  ...       False      False   \n","6738    False      False      False    False  ...       False      False   \n","6739    False      False      False    False  ...       False      False   \n","6740    False      False      False    False  ...       False      False   \n","\n","      whole grain wheat flour  wild rice   wine   wood    yam  yeast  yogurt  \\\n","0                       False      False  False  False  False  False   False   \n","1                       False      False  False  False  False  False   False   \n","2                       False      False   True  False  False  False   False   \n","3                       False      False  False  False  False  False   False   \n","5                        True      False  False  False  False  False   False   \n","...                       ...        ...    ...    ...    ...    ...     ...   \n","6736                    False      False  False  False  False  False   False   \n","6737                    False      False  False  False  False  False   False   \n","6738                    False      False  False  False  False  False   False   \n","6739                    False      False  False  False  False  False   False   \n","6740                    False      False  False  False  False  False   False   \n","\n","      zucchini  \n","0        False  \n","1        False  \n","2        False  \n","3        False  \n","5        False  \n","...        ...  \n","6736     False  \n","6737     False  \n","6738     False  \n","6739     False  \n","6740     False  \n","\n","[6473 rows x 373 columns]"],"text/html":["\n","  <div id=\"df-0102b7a2-e66b-4adb-b249-54e7b0a12247\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alcoholic beverage</th>\n","      <th>almond</th>\n","      <th>anise</th>\n","      <th>anise seed</th>\n","      <th>apple</th>\n","      <th>apple juice</th>\n","      <th>apricot</th>\n","      <th>artichoke</th>\n","      <th>asparagus</th>\n","      <th>avocado</th>\n","      <th>...</th>\n","      <th>white wine</th>\n","      <th>whitefish</th>\n","      <th>whole grain wheat flour</th>\n","      <th>wild rice</th>\n","      <th>wine</th>\n","      <th>wood</th>\n","      <th>yam</th>\n","      <th>yeast</th>\n","      <th>yogurt</th>\n","      <th>zucchini</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6473 rows × 373 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0102b7a2-e66b-4adb-b249-54e7b0a12247')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0102b7a2-e66b-4adb-b249-54e7b0a12247 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0102b7a2-e66b-4adb-b249-54e7b0a12247');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["#pickle the dataframe yum_ingr and yum_X\n","yum_ingr.to_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yummly_ingr.pkl')\n","yum_X.to_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yummly_ingrX.pkl')"],"metadata":{"id":"VWGAltOJPqU7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ingr_comp = pd.read_csv('/content/drive/Shareddrives/MLNS/Project/Codes/Data/ingr_comp.tsv',sep='\\t')\n","# comp = pd.read_csv('/content/drive/Shareddrives/MLNS/Project/Codes/Data/comp_info.tsv',index_col=0,sep='\\t')\n","# ingr = pd.read_csv('/content/drive/Shareddrives/MLNS/Project/Codes/Data/ingr_info.tsv',index_col=0,sep='\\t')\n","\n","# def flavor_profile(df,ingr,comp,ingr_comp):\n","def flavor_net(df,ingr,comp,ingr_comp):\n","    # here we take the info from the table yum_X that holds the info about the ingredients that are present in each recipe\n","    ingredientes_ordenados = df.columns\n","    ingredientes_bajo=[]\n","    for item in ingredientes_ordenados:\n","        ingredientes_bajo.append(item.replace(' ','_'))\n","\n","    print(f'Ingredients with underscore:{len(ingredientes_bajo)} #### Sorted ingredients: {len(ingredientes_ordenados)}')\n","    # join the table that has all the ingredient compounds (the nmatching between ingredient id\tand compound id) and the ingredients\n","    # the table that has the ingredient name\tcategory\tspace ingredients\n","    ingr_total = ingr_comp.join(ingr,how='right',on='# ingredient id')\n","    ingr_total = ingr_total.join(comp,how='right',on='compound id')\n","    # here we make a frequency table between the ingredients with undersore and the compound_id\n","    # HEADS UP! an ingredient can have more than just one compound\n","    ingr_pivot = pd.crosstab(ingr_total['ingredient name'],ingr_total['compound id'])\n","    # here we filter the pivot table by just getting the rows that contain the ingredients that are currently in yum_X\n","    ingr_flavor = ingr_pivot[ingr_pivot.index.isin(ingredientes_bajo)]\n","    # this will have the dot product between the yum_X filtered and the ingr_flavor\n","    df_flavor = df.values.dot(ingr_flavor.values)\n","    print(f'The input dataframe shape: {df.shape} #### The output dataframe shape: {df_flavor.shape}')\n","\n","    return df_flavor"],"metadata":{"id":"7R_Wgtj0PqSE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum_flavor_net = flavor_net(yum_X, ingr, comp, ingr_comp)\n","yum_flavor_net"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6euvfD9X565h","executionInfo":{"status":"ok","timestamp":1680675735819,"user_tz":-120,"elapsed":4737,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"0841c05c-30b9-421a-c3e6-b56a5e3e50f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Ingredients with undersocre:373 #### Sorted ingredients: 373\n","The input dataframe shape: (6473, 373) #### The output dataframe shape: (6473, 1107)\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 0, ..., 4, 0, 0],\n","       [0, 0, 0, ..., 2, 0, 0],\n","       [0, 0, 0, ..., 3, 0, 1],\n","       ...,\n","       [0, 0, 0, ..., 3, 0, 0],\n","       [0, 0, 0, ..., 3, 0, 0],\n","       [0, 0, 0, ..., 6, 0, 0]])"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# We are going to use the method Term Frequency-Inverse Document Frequency to normalize the data\n","def normalize_TF_ID(flavor_arr):\n","  '''  To normalize the flavor matrix, we are going to use the TF-IDF method (term frequency-inverse document frequency) \n","    is a statistical measure that evaluates how relevant a word is to a document in a collection of documents.\n","\n","    This is done by multiplying two metrics: how many times a word appears in a document, \n","    and the inverse document frequency of the word across a set of documents \n","    \n","    takes as input an array and returns an array normalized\n","    '''\n","  # here we calculate the L2 normalization fot the array\n","  flavor_arr_aux = flavor_arr.copy()\n","  N=flavor_arr_aux.shape[0]\n","  L2_norm = np.sqrt(np.sum(flavor_arr_aux**2, axis=1)).reshape(N, 1)\n","  L2_norm[L2_norm==0]=1\n","  flavor_arr_aux_norm = flavor_arr_aux/L2_norm\n","  # here we count the elements that are greater than 0 in each column, thus the frequency of each flavor\n","  flavor_arr_aux_freq = np.sum(flavor_arr_aux_norm>0, axis=0)\n","  # here we calculate the Inverse Document Frequency\n","  # we opt for 1.0 + flavor_arr_aux_freq to avoid division by zero\n","  flavor_arr_aux_idf =np.log(float(N) / (1.0 + flavor_arr_aux_freq))\n","  # flavor_arr_aux_idf = np.log(float(N+1) / (1.0 + flavor_arr_aux_freq)) + 1.0\n","  TF_IDF = np.multiply(flavor_arr_aux_norm, flavor_arr_aux_idf)\n","  TF_IDF = normalize(TF_IDF, norm='l2', axis=1)\n","  print(f'The shape of the Term Frequency-Inverse Document Frequency matrix is:{TF_IDF.shape}')\n","  return TF_IDF"],"metadata":{"id":"0V-PpHe46pGO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#make tfidf from flavor profile\n","yum_tf_idf = normalize_TF_ID(yum_flavor_net)\n","yum_tf_idf"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xopbSdix5wqn","executionInfo":{"status":"ok","timestamp":1680682300606,"user_tz":-120,"elapsed":217,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"b0d49341-9511-47ef-fcb1-c362086a0ea1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of the Term Frequency-Inverse Document Frequency matrix is:(6473, 1107)\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0.        , 0.        , 0.        , ..., 0.02597194, 0.        ,\n","        0.        ],\n","       [0.        , 0.        , 0.        , ..., 0.00805874, 0.        ,\n","        0.        ],\n","       [0.        , 0.        , 0.        , ..., 0.01881414, 0.        ,\n","        0.14831895],\n","       ...,\n","       [0.        , 0.        , 0.        , ..., 0.00951818, 0.        ,\n","        0.        ],\n","       [0.        , 0.        , 0.        , ..., 0.0153139 , 0.        ,\n","        0.        ],\n","       [0.        , 0.        , 0.        , ..., 0.01515727, 0.        ,\n","        0.        ]])"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["# we save the results into pickle format\n","pd.DataFrame(yum_flavor_net).to_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yum_flavor.pkl')\n","pd.DataFrame(yum_tf_idf).to_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yum_tfidf.pkl')"],"metadata":{"id":"cJ9j5fFI6-Nv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Let's build the graph\n","\n","Fot his section, please go to the code Its_backbone"],"metadata":{"id":"uidfTwa4g3wS"}},{"cell_type":"markdown","source":["# Let's build the classification\n","Here we are going to try to fit the recipes into different classifications based on the ingredients that they use, to see if we are able to do predict them"],"metadata":{"id":"tbDZavWhoQ12"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import pickle\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn import svm\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.model_selection import KFold, train_test_split\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix, classification_report"],"metadata":{"id":"pFEUhAjbh_Zj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum=pd.read_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yummly_clean.pkl')\n","yum"],"metadata":{"id":"jBDCaA2X6qKp","executionInfo":{"status":"ok","timestamp":1680966411259,"user_tz":-120,"elapsed":2582,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"colab":{"base_uri":"https://localhost:8080/","height":918},"outputId":"2656c3e3-605b-4890-a45d-f9e58b2a767e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     id  \\\n","0                   Southern-Cornbread-Dressing-1357820   \n","1               Disappearing-buffalo-chicken-dip-297712   \n","2                         Classic-macaroni-salad-304692   \n","3                               Classic-coleslaw-303481   \n","4     Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","...                                                 ...   \n","6736                    Thai-Coconut-Shrimp-Soup-901927   \n","6737                   Thai-Style-Broiled-Shrimp-779084   \n","6738                       Pad-Thai-French-Fries-984208   \n","6739                 Spicy-Thai-Lobster-Soup-My-Recipes   \n","6740   Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                                             recipeName  rating  \\\n","0                           Southern Cornbread Dressing       4   \n","1                      Disappearing Buffalo Chicken Dip       4   \n","2                                Classic Macaroni Salad       4   \n","3                                      Classic Coleslaw       4   \n","4     Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","...                                                 ...     ...   \n","6736                           Thai Coconut Shrimp Soup       3   \n","6737                          Thai-Style Broiled Shrimp       3   \n","6738                              Pad Thai French Fries       4   \n","6739                            Spicy Thai Lobster Soup       4   \n","6740                    Thai Salad with Peanut Dressing       4   \n","\n","      totalTimeInSeconds                 course  \\\n","0                 3600.0                    NaN   \n","1                 2100.0           [Appetizers]   \n","2                 1500.0  [Salads, Side Dishes]   \n","3                  600.0  [Salads, Side Dishes]   \n","4                 1380.0          [Main Dishes]   \n","...                  ...                    ...   \n","6736              1500.0                [Soups]   \n","6737               600.0                    NaN   \n","6738              1800.0                    NaN   \n","6739              3300.0   [Main Dishes, Soups]   \n","6740               900.0               [Salads]   \n","\n","                             cuisine  \\\n","0     Southern & Soul Food, American   \n","1                           American   \n","2                           American   \n","3     Southern & Soul Food, American   \n","4                           American   \n","...                              ...   \n","6736                     Thai, Asian   \n","6737                     Thai, Asian   \n","6738                     Thai, Asian   \n","6739                     Thai, Asian   \n","6740                     Thai, Asian   \n","\n","                                            ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann' or best food real m...   \n","3     [hellmann' or best food real mayonnais, lemon ...   \n","4     [lean ground turkey, hot sauce, ranch-style se...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrots, garlic, gin...   \n","6737  [garlic cloves, thai chile, salt, sugar, fish ...   \n","6738  [sauce, fish sauce, cilantro, lime, peanuts, c...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onions, reduced fa...   \n","\n","                                      clean ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann or best food real ma...   \n","3     [hellmann or best food real mayonnais, lemon j...   \n","4     [lean ground turkey, hot sauce, ranch style se...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrot, garlic, ging...   \n","6737  [garlic clove, thai chile, salt, sugar, fish s...   \n","6738  [sauce, fish sauce, cilantro, lime, peanut, cr...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onion, reduced fat...   \n","\n","                                  new_clean_ingredients  \n","0     [buttermilk cornbread, butter, rubbed sage, ce...  \n","1     [mayonnaise, cayenne pepper sauce, lemon juice...  \n","2     [hellmann or best food real mayonnais, hellman...  \n","3     [hellmann or best food real mayonnais, green b...  \n","4     [bread, lemon, white bread, crumbled blue chee...  \n","...                                                 ...  \n","6736  [shrimp, lemongrass, olive oil, fresh cilantro...  \n","6737  [garlic clove, mint, peeled shrimp, sugar, lim...  \n","6738  [lemongrass, creamy peanut butter, fermented s...  \n","6739  [long grain rice, fresh cilantro, fresh lime j...  \n","6740  [purple onion, peeled fresh ginger, beansprout...  \n","\n","[6741 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-7aeb4558-9db9-41e6-b125-a8610f98fc7b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","      <th>clean ingredients</th>\n","      <th>new_clean_ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, butter, rubbed sage, ce...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[mayonnaise, cayenne pepper sauce, lemon juice...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","      <td>[elbow macaroni, hellmann or best food real ma...</td>\n","      <td>[hellmann or best food real mayonnais, hellman...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","      <td>[hellmann or best food real mayonnais, lemon j...</td>\n","      <td>[hellmann or best food real mayonnais, green b...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","      <td>[lean ground turkey, hot sauce, ranch style se...</td>\n","      <td>[bread, lemon, white bread, crumbled blue chee...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>Thai-Coconut-Shrimp-Soup-901927</td>\n","      <td>Thai Coconut Shrimp Soup</td>\n","      <td>3</td>\n","      <td>1500.0</td>\n","      <td>[Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[olive oil, large shrimp, carrots, garlic, gin...</td>\n","      <td>[olive oil, large shrimp, carrot, garlic, ging...</td>\n","      <td>[shrimp, lemongrass, olive oil, fresh cilantro...</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","      <td>[garlic clove, thai chile, salt, sugar, fish s...</td>\n","      <td>[garlic clove, mint, peeled shrimp, sugar, lim...</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanut, cr...</td>\n","      <td>[lemongrass, creamy peanut butter, fermented s...</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[long grain rice, fresh cilantro, fresh lime j...</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai, Asian</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","      <td>[water, rice vinegar, green onion, reduced fat...</td>\n","      <td>[purple onion, peeled fresh ginger, beansprout...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6741 rows × 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7aeb4558-9db9-41e6-b125-a8610f98fc7b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7aeb4558-9db9-41e6-b125-a8610f98fc7b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7aeb4558-9db9-41e6-b125-a8610f98fc7b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["def elim_Unnamed(the_df):\n","    cols_to_drop = [col for col in the_df.columns if col.startswith('Unnamed:')]\n","    the_df=the_df.drop(cols_to_drop, axis=1)\n","    return the_df "],"metadata":{"id":"lXS2RSNCiGZK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yum=elim_Unnamed(yum)\n","yum.head()"],"metadata":{"id":"FtZm4HJm6qHz","executionInfo":{"status":"ok","timestamp":1680945629979,"user_tz":-120,"elapsed":4,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"colab":{"base_uri":"https://localhost:8080/","height":493},"outputId":"739ff5bb-5d53-4e09-9807-4b3d431daccf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  id  \\\n","0                Southern-Cornbread-Dressing-1357820   \n","1            Disappearing-buffalo-chicken-dip-297712   \n","2                      Classic-macaroni-salad-304692   \n","3                            Classic-coleslaw-303481   \n","4  Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","\n","                                          recipeName  rating  \\\n","0                        Southern Cornbread Dressing       4   \n","1                   Disappearing Buffalo Chicken Dip       4   \n","2                             Classic Macaroni Salad       4   \n","3                                   Classic Coleslaw       4   \n","4  Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","\n","   totalTimeInSeconds                 course                         cuisine  \\\n","0              3600.0                    NaN  Southern & Soul Food, American   \n","1              2100.0           [Appetizers]                        American   \n","2              1500.0  [Salads, Side Dishes]                        American   \n","3               600.0  [Salads, Side Dishes]  Southern & Soul Food, American   \n","4              1380.0          [Main Dishes]                        American   \n","\n","                                         ingredients  \\\n","0  [buttermilk cornbread, sandwich bread, salt, b...   \n","1  [light mayonnaise, lemon juice, cayenne pepper...   \n","2  [elbow macaroni, hellmann' or best food real m...   \n","3  [hellmann' or best food real mayonnais, lemon ...   \n","4  [lean ground turkey, hot sauce, ranch-style se...   \n","\n","                                   clean ingredients  \\\n","0  [buttermilk cornbread, sandwich bread, salt, b...   \n","1  [light mayonnaise, lemon juice, cayenne pepper...   \n","2  [elbow macaroni, hellmann or best food real ma...   \n","3  [hellmann or best food real mayonnais, lemon j...   \n","4  [lean ground turkey, hot sauce, ranch style se...   \n","\n","                               new_clean_ingredients  \n","0  [buttermilk cornbread, butter, rubbed sage, ce...  \n","1  [mayonnaise, cayenne pepper sauce, lemon juice...  \n","2  [hellmann or best food real mayonnais, hellman...  \n","3  [hellmann or best food real mayonnais, green b...  \n","4  [bread, lemon, white bread, crumbled blue chee...  "],"text/html":["\n","  <div id=\"df-e2da3233-884f-437c-a5cd-d6599dc687f9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","      <th>clean ingredients</th>\n","      <th>new_clean_ingredients</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, butter, rubbed sage, ce...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[mayonnaise, cayenne pepper sauce, lemon juice...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","      <td>[elbow macaroni, hellmann or best food real ma...</td>\n","      <td>[hellmann or best food real mayonnais, hellman...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","      <td>[hellmann or best food real mayonnais, lemon j...</td>\n","      <td>[hellmann or best food real mayonnais, green b...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","      <td>[lean ground turkey, hot sauce, ranch style se...</td>\n","      <td>[bread, lemon, white bread, crumbled blue chee...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2da3233-884f-437c-a5cd-d6599dc687f9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e2da3233-884f-437c-a5cd-d6599dc687f9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e2da3233-884f-437c-a5cd-d6599dc687f9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Extract unique ingredients and sort them\n","df_aux_filter=yum.copy()\n","# we are going to create a dataset with all the ingredients available as columns\n","unique_ingredients = sorted(set(ingredient for row in df_aux_filter['new_clean_ingredients'] for ingredient in row))\n","# Create a new DataFrame with a column for each ingredient\n","df_just_truefalse_ingr = pd.DataFrame({ingredient: df_aux_filter['new_clean_ingredients'].apply(lambda x: ingredient in x) for ingredient in unique_ingredients})\n","df_recipe_truefalse_ingr = pd.merge(df_aux_filter, df_just_truefalse_ingr, left_index=True, right_index=True)"],"metadata":{"id":"D-SDCr5pyIU-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_recipe_truefalse_ingr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6AIlm-BsylLn","executionInfo":{"status":"ok","timestamp":1680945646598,"user_tz":-120,"elapsed":229,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"a88a0af4-be1e-4fe7-dca0-728d1081fbe2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                     id  \\\n","0                   Southern-Cornbread-Dressing-1357820   \n","1               Disappearing-buffalo-chicken-dip-297712   \n","2                         Classic-macaroni-salad-304692   \n","3                               Classic-coleslaw-303481   \n","4     Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...   \n","...                                                 ...   \n","6736                    Thai-Coconut-Shrimp-Soup-901927   \n","6737                   Thai-Style-Broiled-Shrimp-779084   \n","6738                       Pad-Thai-French-Fries-984208   \n","6739                 Spicy-Thai-Lobster-Soup-My-Recipes   \n","6740   Thai-Salad-with-Peanut-Dressing-MyRecipes-213423   \n","\n","                                             recipeName  rating  \\\n","0                           Southern Cornbread Dressing       4   \n","1                      Disappearing Buffalo Chicken Dip       4   \n","2                                Classic Macaroni Salad       4   \n","3                                      Classic Coleslaw       4   \n","4     Buffalo Turkey Burgers with Buffalo Blue Chees...       4   \n","...                                                 ...     ...   \n","6736                           Thai Coconut Shrimp Soup       3   \n","6737                          Thai-Style Broiled Shrimp       3   \n","6738                              Pad Thai French Fries       4   \n","6739                            Spicy Thai Lobster Soup       4   \n","6740                    Thai Salad with Peanut Dressing       4   \n","\n","      totalTimeInSeconds                 course  \\\n","0                 3600.0                    NaN   \n","1                 2100.0           [Appetizers]   \n","2                 1500.0  [Salads, Side Dishes]   \n","3                  600.0  [Salads, Side Dishes]   \n","4                 1380.0          [Main Dishes]   \n","...                  ...                    ...   \n","6736              1500.0                [Soups]   \n","6737               600.0                    NaN   \n","6738              1800.0                    NaN   \n","6739              3300.0   [Main Dishes, Soups]   \n","6740               900.0               [Salads]   \n","\n","                             cuisine  \\\n","0     Southern & Soul Food, American   \n","1                           American   \n","2                           American   \n","3     Southern & Soul Food, American   \n","4                           American   \n","...                              ...   \n","6736                     Thai, Asian   \n","6737                     Thai, Asian   \n","6738                     Thai, Asian   \n","6739                     Thai, Asian   \n","6740                     Thai, Asian   \n","\n","                                            ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann' or best food real m...   \n","3     [hellmann' or best food real mayonnais, lemon ...   \n","4     [lean ground turkey, hot sauce, ranch-style se...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrots, garlic, gin...   \n","6737  [garlic cloves, thai chile, salt, sugar, fish ...   \n","6738  [sauce, fish sauce, cilantro, lime, peanuts, c...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onions, reduced fa...   \n","\n","                                      clean ingredients  \\\n","0     [buttermilk cornbread, sandwich bread, salt, b...   \n","1     [light mayonnaise, lemon juice, cayenne pepper...   \n","2     [elbow macaroni, hellmann or best food real ma...   \n","3     [hellmann or best food real mayonnais, lemon j...   \n","4     [lean ground turkey, hot sauce, ranch style se...   \n","...                                                 ...   \n","6736  [olive oil, large shrimp, carrot, garlic, ging...   \n","6737  [garlic clove, thai chile, salt, sugar, fish s...   \n","6738  [sauce, fish sauce, cilantro, lime, peanut, cr...   \n","6739  [lobster, vegetable oil, asian, fish, lime rin...   \n","6740  [water, rice vinegar, green onion, reduced fat...   \n","\n","                                  new_clean_ingredients  abura age  ...  \\\n","0     [buttermilk cornbread, butter, rubbed sage, ce...      False  ...   \n","1     [mayonnaise, cayenne pepper sauce, lemon juice...      False  ...   \n","2     [hellmann or best food real mayonnais, hellman...      False  ...   \n","3     [hellmann or best food real mayonnais, green b...      False  ...   \n","4     [bread, lemon, white bread, crumbled blue chee...      False  ...   \n","...                                                 ...        ...  ...   \n","6736  [shrimp, lemongrass, olive oil, fresh cilantro...      False  ...   \n","6737  [garlic clove, mint, peeled shrimp, sugar, lim...      False  ...   \n","6738  [lemongrass, creamy peanut butter, fermented s...      False  ...   \n","6739  [long grain rice, fresh cilantro, fresh lime j...      False  ...   \n","6740  [purple onion, peeled fresh ginger, beansprout...      False  ...   \n","\n","      yogurt  yogurt plain  yucca  yukon gold potato   yuzu  yuzukosho   ziti  \\\n","0      False         False  False              False  False      False  False   \n","1      False         False  False              False  False      False  False   \n","2      False         False  False              False  False      False  False   \n","3      False         False  False              False  False      False  False   \n","4      False         False  False              False  False      False  False   \n","...      ...           ...    ...                ...    ...        ...    ...   \n","6736   False         False  False              False  False      False  False   \n","6737   False         False  False              False  False      False  False   \n","6738   False         False  False              False  False      False  False   \n","6739   False         False  False              False  False      False  False   \n","6740   False         False  False              False  False      False  False   \n","\n","      ziti rigate  zucchini  zucchini blossom  \n","0           False     False             False  \n","1           False     False             False  \n","2           False     False             False  \n","3           False     False             False  \n","4           False     False             False  \n","...           ...       ...               ...  \n","6736        False     False             False  \n","6737        False     False             False  \n","6738        False     False             False  \n","6739        False     False             False  \n","6740        False     False             False  \n","\n","[6741 rows x 2593 columns]"],"text/html":["\n","  <div id=\"df-581f8b89-290a-449c-b81d-476704240785\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>recipeName</th>\n","      <th>rating</th>\n","      <th>totalTimeInSeconds</th>\n","      <th>course</th>\n","      <th>cuisine</th>\n","      <th>ingredients</th>\n","      <th>clean ingredients</th>\n","      <th>new_clean_ingredients</th>\n","      <th>abura age</th>\n","      <th>...</th>\n","      <th>yogurt</th>\n","      <th>yogurt plain</th>\n","      <th>yucca</th>\n","      <th>yukon gold potato</th>\n","      <th>yuzu</th>\n","      <th>yuzukosho</th>\n","      <th>ziti</th>\n","      <th>ziti rigate</th>\n","      <th>zucchini</th>\n","      <th>zucchini blossom</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Southern-Cornbread-Dressing-1357820</td>\n","      <td>Southern Cornbread Dressing</td>\n","      <td>4</td>\n","      <td>3600.0</td>\n","      <td>NaN</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, sandwich bread, salt, b...</td>\n","      <td>[buttermilk cornbread, butter, rubbed sage, ce...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Disappearing-buffalo-chicken-dip-297712</td>\n","      <td>Disappearing Buffalo Chicken Dip</td>\n","      <td>4</td>\n","      <td>2100.0</td>\n","      <td>[Appetizers]</td>\n","      <td>American</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[light mayonnaise, lemon juice, cayenne pepper...</td>\n","      <td>[mayonnaise, cayenne pepper sauce, lemon juice...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Classic-macaroni-salad-304692</td>\n","      <td>Classic Macaroni Salad</td>\n","      <td>4</td>\n","      <td>1500.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>American</td>\n","      <td>[elbow macaroni, hellmann' or best food real m...</td>\n","      <td>[elbow macaroni, hellmann or best food real ma...</td>\n","      <td>[hellmann or best food real mayonnais, hellman...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Classic-coleslaw-303481</td>\n","      <td>Classic Coleslaw</td>\n","      <td>4</td>\n","      <td>600.0</td>\n","      <td>[Salads, Side Dishes]</td>\n","      <td>Southern &amp; Soul Food, American</td>\n","      <td>[hellmann' or best food real mayonnais, lemon ...</td>\n","      <td>[hellmann or best food real mayonnais, lemon j...</td>\n","      <td>[hellmann or best food real mayonnais, green b...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buffalo-Turkey-Burgers-with-Buffalo-Blue-Chees...</td>\n","      <td>Buffalo Turkey Burgers with Buffalo Blue Chees...</td>\n","      <td>4</td>\n","      <td>1380.0</td>\n","      <td>[Main Dishes]</td>\n","      <td>American</td>\n","      <td>[lean ground turkey, hot sauce, ranch-style se...</td>\n","      <td>[lean ground turkey, hot sauce, ranch style se...</td>\n","      <td>[bread, lemon, white bread, crumbled blue chee...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6736</th>\n","      <td>Thai-Coconut-Shrimp-Soup-901927</td>\n","      <td>Thai Coconut Shrimp Soup</td>\n","      <td>3</td>\n","      <td>1500.0</td>\n","      <td>[Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[olive oil, large shrimp, carrots, garlic, gin...</td>\n","      <td>[olive oil, large shrimp, carrot, garlic, ging...</td>\n","      <td>[shrimp, lemongrass, olive oil, fresh cilantro...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6737</th>\n","      <td>Thai-Style-Broiled-Shrimp-779084</td>\n","      <td>Thai-Style Broiled Shrimp</td>\n","      <td>3</td>\n","      <td>600.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[garlic cloves, thai chile, salt, sugar, fish ...</td>\n","      <td>[garlic clove, thai chile, salt, sugar, fish s...</td>\n","      <td>[garlic clove, mint, peeled shrimp, sugar, lim...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6738</th>\n","      <td>Pad-Thai-French-Fries-984208</td>\n","      <td>Pad Thai French Fries</td>\n","      <td>4</td>\n","      <td>1800.0</td>\n","      <td>NaN</td>\n","      <td>Thai, Asian</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanuts, c...</td>\n","      <td>[sauce, fish sauce, cilantro, lime, peanut, cr...</td>\n","      <td>[lemongrass, creamy peanut butter, fermented s...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6739</th>\n","      <td>Spicy-Thai-Lobster-Soup-My-Recipes</td>\n","      <td>Spicy Thai Lobster Soup</td>\n","      <td>4</td>\n","      <td>3300.0</td>\n","      <td>[Main Dishes, Soups]</td>\n","      <td>Thai, Asian</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[lobster, vegetable oil, asian, fish, lime rin...</td>\n","      <td>[long grain rice, fresh cilantro, fresh lime j...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>Thai-Salad-with-Peanut-Dressing-MyRecipes-213423</td>\n","      <td>Thai Salad with Peanut Dressing</td>\n","      <td>4</td>\n","      <td>900.0</td>\n","      <td>[Salads]</td>\n","      <td>Thai, Asian</td>\n","      <td>[water, rice vinegar, green onions, reduced fa...</td>\n","      <td>[water, rice vinegar, green onion, reduced fat...</td>\n","      <td>[purple onion, peeled fresh ginger, beansprout...</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6741 rows × 2593 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-581f8b89-290a-449c-b81d-476704240785')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-581f8b89-290a-449c-b81d-476704240785 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-581f8b89-290a-449c-b81d-476704240785');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["yum.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_XTOaTym6qBC","executionInfo":{"status":"ok","timestamp":1680966507503,"user_tz":-120,"elapsed":195,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"62b98008-b3a0-4ff3-ea4c-be26825d5649"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'recipeName', 'rating', 'totalTimeInSeconds', 'course', 'cuisine',\n","       'ingredients', 'clean ingredients', 'new_clean_ingredients'],\n","      dtype='object')"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# drop the columns from Yum, so we can only have the ingredients as columns \n","yum_X=df_recipe_truefalse_ingr.drop(yum.columns,axis=1)\n","yum_X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"GLwvPRF4uEJ9","executionInfo":{"status":"ok","timestamp":1680966510972,"user_tz":-120,"elapsed":387,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"1f73cdb5-9a0a-4c01-bc77-e8a5ca8cc358"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   abura age  accent  achiote  achiote powder  acorn squash  adobo  \\\n","0      False   False    False           False         False  False   \n","1      False   False    False           False         False  False   \n","2      False   False    False           False         False  False   \n","3      False   False    False           False         False  False   \n","4      False   False    False           False         False  False   \n","\n","   adobo sauce  adobo seasoning  agave nectar  aged manchego cheese  ...  \\\n","0        False            False         False                 False  ...   \n","1        False            False         False                 False  ...   \n","2        False            False         False                 False  ...   \n","3        False            False         False                 False  ...   \n","4        False            False         False                 False  ...   \n","\n","   yogurt  yogurt plain  yucca  yukon gold potato   yuzu  yuzukosho   ziti  \\\n","0   False         False  False              False  False      False  False   \n","1   False         False  False              False  False      False  False   \n","2   False         False  False              False  False      False  False   \n","3   False         False  False              False  False      False  False   \n","4   False         False  False              False  False      False  False   \n","\n","   ziti rigate  zucchini  zucchini blossom  \n","0        False     False             False  \n","1        False     False             False  \n","2        False     False             False  \n","3        False     False             False  \n","4        False     False             False  \n","\n","[5 rows x 2584 columns]"],"text/html":["\n","  <div id=\"df-a84c5826-0c99-4e66-b8ed-70a24c96dd69\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>abura age</th>\n","      <th>accent</th>\n","      <th>achiote</th>\n","      <th>achiote powder</th>\n","      <th>acorn squash</th>\n","      <th>adobo</th>\n","      <th>adobo sauce</th>\n","      <th>adobo seasoning</th>\n","      <th>agave nectar</th>\n","      <th>aged manchego cheese</th>\n","      <th>...</th>\n","      <th>yogurt</th>\n","      <th>yogurt plain</th>\n","      <th>yucca</th>\n","      <th>yukon gold potato</th>\n","      <th>yuzu</th>\n","      <th>yuzukosho</th>\n","      <th>ziti</th>\n","      <th>ziti rigate</th>\n","      <th>zucchini</th>\n","      <th>zucchini blossom</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 2584 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a84c5826-0c99-4e66-b8ed-70a24c96dd69')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a84c5826-0c99-4e66-b8ed-70a24c96dd69 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a84c5826-0c99-4e66-b8ed-70a24c96dd69');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["# Cuisine classification with ingredients matrix"],"metadata":{"id":"xkGgzSfICQId"}},{"cell_type":"code","source":["yum_Y=df_recipe_truefalse_ingr['cuisine']"],"metadata":{"id":"XO9-OPzQ4lv9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Logistic Regression"],"metadata":{"id":"8d6UV2OH12Ig"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(yum_X,yum_Y,random_state=10)\n","model = LogisticRegression(max_iter=500)\n","model.fit(X_train, y_train)\n","y_pred = model.predict(X_test)\n","print(f'Basic logistic regression:{metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"id":"_XFFjtDyPf_m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680855993731,"user_tz":-120,"elapsed":24135,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"198f916a-e98c-4c4e-f356-6e6da7f59b65"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Basic logistic regression:0.6903914590747331\n"]}]},{"cell_type":"code","source":["np.logspace(-3,3,7)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cgpw7w7B6D7n","executionInfo":{"status":"ok","timestamp":1680773766375,"user_tz":-120,"elapsed":247,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"62d632fc-1585-4e42-9843-e9254435c934"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["modelo = LogisticRegression()\n","# C_ =[0.01,0.1,1,10,100]\n","parametros=[{'penalty' : ['l1'],'solver'  : ['liblinear'],'max_iter':[500],'C': [0.1,1,10,100]}]\n","# parametros=[{'penalty' : ['l1','l2'],'solver'  : ['newton-cg', 'lbfgs', 'liblinear'],'max_iter':[500],'C': [0.1,1,10,100]}]\n","clf = GridSearchCV(modelo,                    # model\n","                   param_grid = parametros,   # hyperparameters\n","                   scoring='accuracy',        # metric for scoring\n","                   cv=10)                     # number of folds\n","\n","clf.fit(X_train,y_train)\n","print(\"Tuned Hyperparameters :\", clf.best_params_)\n","print(\"Accuracy :\",clf.best_score_)"],"metadata":{"id":"aDsIP7FL31YL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680856224182,"user_tz":-120,"elapsed":117855,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"ca2fd3c0-09f1-4051-877a-d1bbd20b3a40"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Tuned Hyperparameters : {'C': 1, 'max_iter': 500, 'penalty': 'l1', 'solver': 'liblinear'}\n","Accuracy : 0.6935745313661801\n"]}]},{"cell_type":"code","source":["modelo = LogisticRegression()\n","parametros=[{'penalty' : ['l1','l2'],'solver'  : ['newton-cg', 'lbfgs', 'liblinear'],'max_iter':[500,750],'C': [0.1,1,10,100]}]\n","clf = GridSearchCV(modelo,                    # model\n","                   param_grid = parametros,   # hyperparameters\n","                   scoring='accuracy',        # metric for scoring\n","                   cv=10)                     # number of folds\n","\n","clf.fit(X_train,y_train)\n","print(\"Tuned Hyperparameters :\", clf.best_params_)\n","print(\"Accuracy :\",clf.best_score_)"],"metadata":{"id":"a8V5Y8qP5j6b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Support Vector Machines"],"metadata":{"id":"_W4v8E5x1RC-"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(yum_X,yum_Y,random_state=10)\n","modelo = svm.LinearSVC(C=1)\n","modelo.fit(X_train, y_train)\n","y_pred =modelo.predict(X_test)\n","print(f'Basic SVM:{metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"id":"eM6LtvS34MNU","executionInfo":{"status":"ok","timestamp":1680856285915,"user_tz":-120,"elapsed":2237,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"063b34af-3e86-48a6-9ac0-d7c0daaa1ea7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Basic SVM:0.669632265717675\n"]}]},{"cell_type":"code","source":["from sklearn.svm import SVC "],"metadata":{"id":"-raUtJYf3koL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["parametros= {'C': [1, 10,50, 100],'kernel': ['rbf', 'poly', 'sigmoid']}\n","grid = GridSearchCV(SVC(),parametros,refit=True,verbose=2)\n","grid.fit(X_train,y_train)"],"metadata":{"id":"TTj4bZkXF5LI","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1680860498150,"user_tz":-120,"elapsed":2094295,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"bf41b3fc-2688-454e-a1d1-dcaec5d57731"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 12 candidates, totalling 60 fits\n","[CV] END ....................................C=1, kernel=rbf; total time=  39.8s\n","[CV] END ....................................C=1, kernel=rbf; total time=  43.0s\n","[CV] END ....................................C=1, kernel=rbf; total time=  48.4s\n","[CV] END ....................................C=1, kernel=rbf; total time=  39.6s\n","[CV] END ....................................C=1, kernel=rbf; total time=  44.7s\n","[CV] END ...................................C=1, kernel=poly; total time=  43.1s\n","[CV] END ...................................C=1, kernel=poly; total time=  39.5s\n","[CV] END ...................................C=1, kernel=poly; total time=  42.2s\n","[CV] END ...................................C=1, kernel=poly; total time=  41.2s\n","[CV] END ...................................C=1, kernel=poly; total time=  40.5s\n","[CV] END ................................C=1, kernel=sigmoid; total time=  22.0s\n","[CV] END ................................C=1, kernel=sigmoid; total time=  23.8s\n","[CV] END ................................C=1, kernel=sigmoid; total time=  23.8s\n","[CV] END ................................C=1, kernel=sigmoid; total time=  23.1s\n","[CV] END ................................C=1, kernel=sigmoid; total time=  23.4s\n","[CV] END ...................................C=10, kernel=rbf; total time=  41.7s\n","[CV] END ...................................C=10, kernel=rbf; total time=  42.2s\n","[CV] END ...................................C=10, kernel=rbf; total time=  43.7s\n","[CV] END ...................................C=10, kernel=rbf; total time=  43.1s\n","[CV] END ...................................C=10, kernel=rbf; total time=  41.4s\n","[CV] END ..................................C=10, kernel=poly; total time=  41.3s\n","[CV] END ..................................C=10, kernel=poly; total time=  42.9s\n","[CV] END ..................................C=10, kernel=poly; total time=  42.1s\n","[CV] END ..................................C=10, kernel=poly; total time=  41.6s\n","[CV] END ..................................C=10, kernel=poly; total time=  41.4s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=  18.5s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=  18.2s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=  17.6s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=  17.7s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=  19.0s\n","[CV] END ...................................C=50, kernel=rbf; total time=  40.5s\n","[CV] END ...................................C=50, kernel=rbf; total time=  41.4s\n","[CV] END ...................................C=50, kernel=rbf; total time=  41.6s\n","[CV] END ...................................C=50, kernel=rbf; total time=  40.5s\n","[CV] END ...................................C=50, kernel=rbf; total time=  40.7s\n","[CV] END ..................................C=50, kernel=poly; total time=  41.2s\n","[CV] END ..................................C=50, kernel=poly; total time=  42.2s\n","[CV] END ..................................C=50, kernel=poly; total time=  41.1s\n","[CV] END ..................................C=50, kernel=poly; total time=  42.4s\n","[CV] END ..................................C=50, kernel=poly; total time=  41.0s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=  17.4s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=  16.9s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=  17.7s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=  17.1s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=  16.6s\n","[CV] END ..................................C=100, kernel=rbf; total time=  41.1s\n","[CV] END ..................................C=100, kernel=rbf; total time=  40.6s\n","[CV] END ..................................C=100, kernel=rbf; total time=  40.6s\n","[CV] END ..................................C=100, kernel=rbf; total time=  40.0s\n","[CV] END ..................................C=100, kernel=rbf; total time=  39.8s\n","[CV] END .................................C=100, kernel=poly; total time=  42.1s\n","[CV] END .................................C=100, kernel=poly; total time=  40.7s\n","[CV] END .................................C=100, kernel=poly; total time=  43.0s\n","[CV] END .................................C=100, kernel=poly; total time=  41.6s\n","[CV] END .................................C=100, kernel=poly; total time=  45.1s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=  17.9s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=  16.4s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=  17.5s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=  18.7s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=  17.8s\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(estimator=SVC(),\n","             param_grid={'C': [1, 10, 50, 100],\n","                         'kernel': ['rbf', 'poly', 'sigmoid']},\n","             verbose=2)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [1, 10, 50, 100],\n","                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;, &#x27;poly&#x27;, &#x27;sigmoid&#x27;]},\n","             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [1, 10, 50, 100],\n","                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;, &#x27;poly&#x27;, &#x27;sigmoid&#x27;]},\n","             verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["print(grid.best_estimator_)"],"metadata":{"id":"jq1WfwIlD0_-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680860787978,"user_tz":-120,"elapsed":303,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"b55a48bc-02ad-49a2-d85d-6f22b5ba9161"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVC(C=10)\n"]}]},{"cell_type":"code","source":["grid_predictions = grid.predict(X_test)\n","print(confusion_matrix(y_test,grid_predictions))\n","print(classification_report(y_test,grid_predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QpBaoh5cHQrZ","executionInfo":{"status":"ok","timestamp":1680860877751,"user_tz":-120,"elapsed":31993,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"12cb9c19-d776-4a10-ff47-703ce3851c45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 60   0   3   1   0   0   2   4   2   3   0   2   0   1   7   0   3   2\n","    0   0   3   0   0   1   2   0]\n"," [  5  97   1   0   0  14   0   0   1   0   0   0   4   0   1   6   0   0\n","    0   0   0   0   0   0   0   9]\n"," [  9   3  27   1   0   0   2   0   0   4   0   1   1   0   1   0   0   1\n","    1   0   0   0   0   1   0   0]\n"," [  0   0   1  87   1   0   0   0   0   0   0   1   0   0   0   0   0   1\n","    0   1   0   0   0   1   0   0]\n"," [  4   0   0   8   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0]\n"," [  3  22   0   0   0  27   0   0   0   0   1   0   0   0   0   1   0   0\n","    0   1   0   0   0   0   0   0]\n"," [  8   1   1   0   0   0  34   0   1   1   0   2   0   0   1   0   0   4\n","    0   3   0   0   0   4   0   1]\n"," [  8   0   1   0   0   0   0  30   3   1   0   1   0   1   1   0   0   0\n","    0   0   0   0   0   2   3   0]\n"," [  6   0   1   1   0   0   0   5  28   0   0   0   0   3   2   0   0   0\n","    0   2   1   0   0   0   0   0]\n"," [  1   0   0   0   0   0   0   1   0  91   0   0   0   0   1   0  11   0\n","    0   1   0   0   0   5   1   0]\n"," [  5   6   4   0   0   2   0   0   1   0  15   0   1   0   1   0   0   0\n","    0   0   0   0   0   0   0   0]\n"," [  0   0   2   0   0   0   0   0   1   0   0  51   1   0   2   0   0   0\n","    0   2   2   0   0   2   2   0]\n"," [  2   3   0   0   0   0   0   0   0   1   0   0  83   1   0   0   0   0\n","    2   0   0   0   0   0   1   0]\n"," [  3   0   0   0   0   0   0   2   1   0   0   1   0  44   0   0   0   1\n","    0   0   3   0   0   1   2   0]\n"," [  5   0   4   0   0   0   0   3   0   0   0   1   0   0  79   0   0   0\n","    0   2   0   0   0   2   0   0]\n"," [  4  18   1   0   0   1   0   1   1   0   0   0   0   0   0  89   0   0\n","    0   0   0   0   0   0   0   0]\n"," [  2   0   0   0   0   0   0   0   0  22   0   0   1   0   0   0   9   0\n","    0   0   0   0   0   1   0   0]\n"," [  3   0   1   0   0   0   4   0   0   0   0   0   0   0   0   0   0  55\n","    1   0   0   2   5   0   0   0]\n"," [  3   0   0   0   0   0   0   0   0   1   0   0   1   0   0   0   1   0\n","   43   0   1   0   0   1   0   0]\n"," [  2   1   1   1   0   0   0   3   2   2   0   1   0   0   2   0   0   0\n","    2  26   0   0   0   5   0   0]\n"," [ 15   1   0   2   0   0   0   2   2   0   0   0   1   1   1   0   1   0\n","    0   0  23   0   0   0   1   0]\n"," [  3   0   1   0   0   0   2   0   0   0   0   0   0   0   0   0   0   4\n","    0   0   0   7   1   0   0   1]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   1   0   1   0   0  11\n","    0   0   0   1   5   0   0   0]\n"," [  4   0   0   0   0   0   0   0   0   1   0   1   0   0   4   1   1   2\n","    1   1   0   0   0  54   0   0]\n"," [  6   0   0   0   0   0   0   4   2   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   1  11   0]\n"," [  3   6   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0 108]]\n","                                                precision    recall  f1-score   support\n","\n","                                      American       0.37      0.62      0.46        96\n","                                         Asian       0.61      0.70      0.66       138\n","                                      Barbecue       0.55      0.52      0.53        52\n","                      Cajun & Creole, American       0.86      0.94      0.90        93\n","Cajun & Creole, Southern & Soul Food, American       0.00      0.00      0.00        12\n","                                Chinese, Asian       0.61      0.49      0.55        55\n","                                         Cuban       0.77      0.56      0.65        61\n","                                        French       0.55      0.59      0.57        51\n","                                        German       0.62      0.57      0.60        49\n","                                         Greek       0.72      0.81      0.76       112\n","                            Hawaiian, American       0.88      0.43      0.58        35\n","                                     Hungarian       0.82      0.78      0.80        65\n","                                 Indian, Asian       0.88      0.89      0.89        93\n","                                         Irish       0.86      0.76      0.81        58\n","                                       Italian       0.76      0.82      0.79        96\n","                               Japanese, Asian       0.92      0.77      0.84       115\n","                                 Mediterranean       0.35      0.26      0.30        35\n","                                       Mexican       0.68      0.77      0.72        71\n","                                      Moroccan       0.86      0.84      0.85        51\n","                                    Portuguese       0.67      0.54      0.60        48\n","                Southern & Soul Food, American       0.70      0.46      0.55        50\n","                        Southwestern, American       0.70      0.37      0.48        19\n","               Southwestern, American, Mexican       0.45      0.26      0.33        19\n","                                       Spanish       0.67      0.77      0.72        70\n","                                       Swedish       0.48      0.46      0.47        24\n","                                   Thai, Asian       0.91      0.92      0.91       118\n","\n","                                      accuracy                           0.70      1686\n","                                     macro avg       0.66      0.61      0.63      1686\n","                                  weighted avg       0.71      0.70      0.70      1686\n","\n"]}]},{"cell_type":"code","source":["print(f'SVM with C=10, has an acuracy of:{metrics.accuracy_score(y_test,grid_predictions)}')\n","# this one gave the best result :)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RIugPMZHHfN7","executionInfo":{"status":"ok","timestamp":1680860999013,"user_tz":-120,"elapsed":205,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"6497a9e5-2ea0-4703-88e9-98f771db7ea5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVM with C=10, has an acuracy of:0.7016607354685647\n"]}]},{"cell_type":"markdown","source":["## NB test"],"metadata":{"id":"89Jd2yD_5I_k"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test =train_test_split(yum_X,yum_Y,random_state=10)\n","model = MultinomialNB()\n","model.fit(X_train, y_train)\n","y_pred = model.predict(X_test)\n","print(f'Accuracy NB, test:{metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"id":"cTs4OI14y_AO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680861102604,"user_tz":-120,"elapsed":4832,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"096092f6-4e9d-4b21-b48f-bcc9434d80d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy NB, test:0.6387900355871886\n"]}]},{"cell_type":"markdown","source":["## Random Forest"],"metadata":{"id":"6Kv40Z4a5Viw"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier"],"metadata":{"id":"lQbwd5Ni6oia"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Instantiate model with 1000 decision trees\n","rf = RandomForestClassifier(n_estimators = 1000, random_state = 3)\n","X_train, X_test, y_train, y_test =train_test_split(yum_X,yum_Y,random_state=10)\n","# Train the model on training data\n","rf.fit(X_train, y_train)\n","y_pred=rf.predict(X_test)\n","print(f'Random Forest Classifier: {metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jBbwxUUs7_hX","executionInfo":{"status":"ok","timestamp":1680861240301,"user_tz":-120,"elapsed":85950,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"4773f2f8-b67e-425d-adce-16e51a398a95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Classifier: 0.6838671411625148\n"]}]},{"cell_type":"markdown","source":["## XGBOOST"],"metadata":{"id":"azE6eRQ-5fQc"}},{"cell_type":"code","source":["from xgboost import XGBClassifier\n","from sklearn.preprocessing import LabelEncoder"],"metadata":{"id":"7P0ednsIrB6u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["le = LabelEncoder()\n","yum_Y_lbl = le.fit_transform(yum_Y)\n","X_train, X_test, y_train, y_test =train_test_split(yum_X,yum_Y_lbl,random_state=10)\n"],"metadata":{"id":"l3sLYwjftKUT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# XGBoost\n","xgb = XGBClassifier()\n","xgb.fit(X_train, y_train)\n","y_train_pred = xgb.predict(X_test)\n","print(f\"Train accuracy: {metrics.accuracy_score(y_test, y_train_pred)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t5r4pZ8Kqr8n","executionInfo":{"status":"ok","timestamp":1680956325160,"user_tz":-120,"elapsed":1453815,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"2439185a-5be2-4c17-9bc3-cfe1b3472f7f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train accuracy: 0.6886120996441281\n"]}]},{"cell_type":"markdown","source":["# Confusion Matrix - Ingredients"],"metadata":{"id":"-zlrQ6kRCLj9"}},{"cell_type":"code","source":["from sklearn.svm import SVC "],"metadata":{"id":"XWYrY9DgbOCI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(yum_X,yum_Y,random_state=10)\n","modelo=SVC(C=10)\n","modelo.fit(X_train, y_train)\n","y_pred =modelo.predict(X_test)\n","print(f'Basic SVM:{metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4898sYlae6g","executionInfo":{"status":"ok","timestamp":1680966804905,"user_tz":-120,"elapsed":62774,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"55f7b97c-7e13-4322-99ab-5645a2a6b561"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Basic SVM:0.7016607354685647\n"]}]},{"cell_type":"code","source":["from matplotlib.colors import ListedColormap\n","from matplotlib.colors import LinearSegmentedColormap\n","\n","import seaborn as sns\n","\n","def plot_confusion_matrix(cm, col, title, cmap=None):\n","    sns.set(style=\"white\") \n","    if cmap is None:\n","        cmap = LinearSegmentedColormap.from_list(\"\", [\"#FFEBDD\", \"#FDA5A5\"])\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    for i in range(cm.shape[0]):\n","        for j in range(cm.shape[1]):\n","            plt.text(j, i, format(cm[i, j], \".2f\"),\n","                     horizontalalignment=\"center\",\n","                     color=\"black\",\n","                     fontsize=6)\n","    plt.title(title, fontsize=15)\n","    plt.colorbar(fraction=0.046, pad=0.04)\n","    tick_marks = np.arange(len(col.unique()))\n","    plt.xticks(tick_marks, sorted(col.unique()), rotation=90,fontsize=6)\n","    plt.yticks(tick_marks, sorted(col.unique()),fontsize=6)\n","    plt.tight_layout()\n","    plt.ylabel(\"True label\", fontsize=10)\n","    plt.xlabel(\"Predicted label\", fontsize=10)\n","\n"],"metadata":{"id":"ADN1s98eexIk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm = confusion_matrix(y_test, y_pred)\n","np.set_printoptions(precision=2)\n","cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","plt.figure(figsize=(10,10))\n","plot_confusion_matrix(cm_normalized, yum['cuisine'], \"Confusion Matrix, for cuisine clasification using ingredients\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":946},"id":"4cH_G4Mme6Sw","executionInfo":{"status":"ok","timestamp":1680969844694,"user_tz":-120,"elapsed":7105,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"7ae57ae1-ed78-4de9-c891-a5749202296b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Cuisine classification with flavor matrix"],"metadata":{"id":"ssHYmhscl9Tu"}},{"cell_type":"code","source":["#read pickled dataframe\n","yum_ingr = pd.read_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yummly_ingr.pkl')\n","yum_tfidf = pd.read_pickle('/content/drive/Shareddrives/MLNS/Project/Codes/mi_data_1/yum_tfidf.pkl')"],"metadata":{"id":"Tv7eSuc0dwEY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = yum_tfidf.values\n","y = yum_ingr['cuisine']"],"metadata":{"id":"WhslazRGnXhf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Regression"],"metadata":{"id":"L9bWCO3zndSw"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=10)\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","y_pred = model.predict(X_test)\n","print(f'Basic logistic regression:{metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iw2HbD3IaexY","executionInfo":{"status":"ok","timestamp":1680969873594,"user_tz":-120,"elapsed":10242,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"671fb51e-5475-4d3f-b863-d81784cd52f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Basic logistic regression:0.6466954910438543\n"]}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=10)\n","modelo = LogisticRegression()\n","# C_ =[0.01,0.1,1,10,100]\n","parametros=[{'penalty' : ['l1'],'solver'  : ['liblinear'],'max_iter':[500],'C': [0.1,1,10,100]}]\n","# parametros=[{'penalty' : ['l1','l2'],'solver'  : ['newton-cg', 'lbfgs', 'liblinear'],'max_iter':[500],'C': [0.1,1,10,100]}]\n","clf = GridSearchCV(modelo,                    # model\n","                   param_grid = parametros,   # hyperparameters\n","                   scoring='accuracy',        # metric for scoring\n","                   cv=10)                     # number of folds\n","\n","clf.fit(X_train,y_train)\n","print(\"Tuned Hyperparameters :\", clf.best_params_)\n","print(\"Accuracy :\",clf.best_score_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AUDVWKX3nZ6r","executionInfo":{"status":"ok","timestamp":1680970442924,"user_tz":-120,"elapsed":433922,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"0c2ef20d-1171-4d3b-e87c-cc9fe9b71970"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Tuned Hyperparameters : {'C': 10, 'max_iter': 500, 'penalty': 'l1', 'solver': 'liblinear'}\n","Accuracy : 0.6621344024436808\n"]}]},{"cell_type":"markdown","source":["# SVC"],"metadata":{"id":"uxLR_l5cqWnS"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=10)\n","modelo=SVC(C=10)\n","modelo.fit(X_train, y_train)\n","y_pred =modelo.predict(X_test)\n","print(f'SVC 1:{metrics.accuracy_score(y_test,y_pred)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PZINnwhInZXK","executionInfo":{"status":"ok","timestamp":1680970855087,"user_tz":-120,"elapsed":24138,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"8b9e6491-7a33-4f65-ee95-a795f59c1661"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVC 1:0.6528721432983323\n"]}]},{"cell_type":"code","source":["parametros= {'C': [10,20,50,100],'kernel': ['rbf', 'poly', 'sigmoid']}\n","grid = GridSearchCV(SVC(),parametros,refit=True,verbose=2)\n","grid.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"NnkzP-ENnZTw","executionInfo":{"status":"ok","timestamp":1680971583949,"user_tz":-120,"elapsed":542286,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"67425ee1-78eb-4836-890b-cdfef8af324f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 12 candidates, totalling 60 fits\n","[CV] END ...................................C=10, kernel=rbf; total time=  11.8s\n","[CV] END ...................................C=10, kernel=rbf; total time=  10.9s\n","[CV] END ...................................C=10, kernel=rbf; total time=  10.9s\n","[CV] END ...................................C=10, kernel=rbf; total time=  11.2s\n","[CV] END ...................................C=10, kernel=rbf; total time=  11.4s\n","[CV] END ..................................C=10, kernel=poly; total time=   9.9s\n","[CV] END ..................................C=10, kernel=poly; total time=  10.5s\n","[CV] END ..................................C=10, kernel=poly; total time=  10.7s\n","[CV] END ..................................C=10, kernel=poly; total time=  10.6s\n","[CV] END ..................................C=10, kernel=poly; total time=  10.1s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=   6.0s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=   5.3s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=   6.2s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=   5.3s\n","[CV] END ...............................C=10, kernel=sigmoid; total time=   5.8s\n","[CV] END ...................................C=20, kernel=rbf; total time=  10.4s\n","[CV] END ...................................C=20, kernel=rbf; total time=  11.0s\n","[CV] END ...................................C=20, kernel=rbf; total time=  11.2s\n","[CV] END ...................................C=20, kernel=rbf; total time=  10.8s\n","[CV] END ...................................C=20, kernel=rbf; total time=  10.7s\n","[CV] END ..................................C=20, kernel=poly; total time=  10.4s\n","[CV] END ..................................C=20, kernel=poly; total time=  10.5s\n","[CV] END ..................................C=20, kernel=poly; total time=  10.0s\n","[CV] END ..................................C=20, kernel=poly; total time=  10.0s\n","[CV] END ..................................C=20, kernel=poly; total time=  10.4s\n","[CV] END ...............................C=20, kernel=sigmoid; total time=   4.9s\n","[CV] END ...............................C=20, kernel=sigmoid; total time=   6.0s\n","[CV] END ...............................C=20, kernel=sigmoid; total time=   4.9s\n","[CV] END ...............................C=20, kernel=sigmoid; total time=   5.1s\n","[CV] END ...............................C=20, kernel=sigmoid; total time=   5.9s\n","[CV] END ...................................C=50, kernel=rbf; total time=  10.9s\n","[CV] END ...................................C=50, kernel=rbf; total time=  10.7s\n","[CV] END ...................................C=50, kernel=rbf; total time=  11.5s\n","[CV] END ...................................C=50, kernel=rbf; total time=  11.2s\n","[CV] END ...................................C=50, kernel=rbf; total time=  11.3s\n","[CV] END ..................................C=50, kernel=poly; total time=   9.8s\n","[CV] END ..................................C=50, kernel=poly; total time=  10.6s\n","[CV] END ..................................C=50, kernel=poly; total time=  10.5s\n","[CV] END ..................................C=50, kernel=poly; total time=  10.1s\n","[CV] END ..................................C=50, kernel=poly; total time=   9.8s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=   5.7s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=   4.9s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=   4.9s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=   5.8s\n","[CV] END ...............................C=50, kernel=sigmoid; total time=   4.7s\n","[CV] END ..................................C=100, kernel=rbf; total time=  11.0s\n","[CV] END ..................................C=100, kernel=rbf; total time=  11.2s\n","[CV] END ..................................C=100, kernel=rbf; total time=  10.5s\n","[CV] END ..................................C=100, kernel=rbf; total time=  11.1s\n","[CV] END ..................................C=100, kernel=rbf; total time=  11.2s\n","[CV] END .................................C=100, kernel=poly; total time=  10.2s\n","[CV] END .................................C=100, kernel=poly; total time=   9.8s\n","[CV] END .................................C=100, kernel=poly; total time=  10.5s\n","[CV] END .................................C=100, kernel=poly; total time=  10.4s\n","[CV] END .................................C=100, kernel=poly; total time=  10.1s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=   5.3s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=   4.7s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=   5.7s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=   4.9s\n","[CV] END ..............................C=100, kernel=sigmoid; total time=   4.8s\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(estimator=SVC(),\n","             param_grid={'C': [10, 20, 50, 100],\n","                         'kernel': ['rbf', 'poly', 'sigmoid']},\n","             verbose=2)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [10, 20, 50, 100],\n","                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;, &#x27;poly&#x27;, &#x27;sigmoid&#x27;]},\n","             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [10, 20, 50, 100],\n","                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;, &#x27;poly&#x27;, &#x27;sigmoid&#x27;]},\n","             verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["print(grid.best_estimator_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0TbDk9TrutOr","executionInfo":{"status":"ok","timestamp":1680971851787,"user_tz":-120,"elapsed":371,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"589ac4dd-0774-44b7-a95a-26c9f3c3908b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVC(C=10)\n"]}]},{"cell_type":"code","source":["grid_predictions = grid.predict(X_test)\n","print(f'SVM with C=10, has an acuracy of:{metrics.accuracy_score(y_test,grid_predictions)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r6py2S40aaPw","executionInfo":{"status":"ok","timestamp":1680971918118,"user_tz":-120,"elapsed":11168,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"33d34d4b-414c-4cf2-9461-8446efbc50c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVM with C=10, has an acuracy of:0.6528721432983323\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"PPvSTXUvdzJi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"eJwBkbXZVoTI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vfeuwdF_VoPn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"3WmUI30dVoMc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DERCtaNVVoJU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_TcQhQhBVoFu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"YAcTU63uVoCc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Auxiliar to get all the ingredients in the yum database\n","\n","todos_ingredientes_yum=yum['new_clean_ingredients']\n","new_list = list(map(str, sum(todos_ingredientes_yum, [])))\n","unique_list = list(set(new_list))\n","yum_ingredients=pd.DataFrame(unique_list, columns=['ingredients'])\n","yum_ingredients\n","''' we have some elements that are empty so we'll have to eliminate those so we don't have any issues \n","also we have a list of ingredients and flavors, so we'll want to map them together. \n","Let's:\n","- analyze for words that don't add value (like brand names)\n","- empty spaces\n","- group names of ingredients'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"nHmaYVgtd897","executionInfo":{"status":"ok","timestamp":1680008465965,"user_tz":-120,"elapsed":2018,"user":{"displayName":"Aiza AVILA CAÑIBE","userId":"05794050573055371907"}},"outputId":"79ce1a08-0816-4460-fcfc-8264c8870d72"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\" we have some elements that are empty so we'll have to eliminate those so we don't have any issues \\nalso we have a list of ingredients and flavors, so we'll want to map them together. \\nLet's:\\n- analyze for words that don't add value (like brand names)\\n- empty spaces\\n- group names of ingredients\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["yum_ingr, yum_X = cleanup_ingredients(ingr_ingredients, yum, 'clean ingredients')\n","                  # def cleanup_ingredients(ingr,df,col):"],"metadata":{"id":"7BX8Nr1PrSF9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_ingredients = filter(lambda x:' ' in x, ingr_ingredients)\n","list(long_ingredients)"],"metadata":{"id":"YwnMrPKCrs3B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ingr_ingredients"],"metadata":{"id":"gUvy23Scrsxb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# df_ingr comes from yummy dataset\n","df_ingr = set()\n","yum['clean ingredients'].map(lambda x: [df_ingr.add(i) for i in x])\n","# long and short ingredients come from ingr_ingredients that comes from ingr and it's from the original database\n","long_ingredients = list(filter(lambda x:' ' in x, ingr_ingredients))\n","short_ingredients = set(ingr_ingredients) - set(long_ingredients)\n","df_dic={}"],"metadata":{"id":"IXoOCiB8rSDV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_ingr"],"metadata":{"id":"l8JVWXkpwYOi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# esto lo hace la clasificaciónm pero tiene algunos issues\n","# por ejemplo 'brown rice vinegar': ['brown rice']\n","# checks item in long_indredients\n","# then for each ingredients from yummy, if the item from the original database is inside the string from yummy\n","# then if the key hasn't been created, then create a key with the ingredient from yummy\n","# and add the item (ingredient from the original database) to the dictionary\n","# if the key is already there, then append the item from the original db to the one in yummy\n","for item in long_ingredients:\n","    for key in df_ingr:\n","        if item in key:\n","            if key not in df_dic:\n","                df_dic[key] = [item]\n","            else:\n","                df_dic[key].append(item)"],"metadata":{"id":"DOyYPZRftr2x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for item in short_ingredients:\n","    for key in df_ingr:\n","        if item in key.split():\n","            if key not in df_dic:\n","                df_dic[key] = [item]\n","            else:\n","                df_dic[key].append(item)"],"metadata":{"id":"xqr3axVLza3S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_dic"],"metadata":{"id":"oPYzTtvBsFd4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["diff_dic = df_ingr - set(df_dic.keys())\n","diff_dic"],"metadata":{"id":"c1VgdiUe0Ci8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_ingr\n","# https://sparkbyexamples.com/pandas/pandas-convert-dataframe-to-dictionary/#:~:text=To%20convert%20pandas%20DataFrame%20to%20Dictionary%20object%2C%20use%20to_dict(),()%20returns%20in%20this%20format.\n","# in gnrl works very wellm just needs a little push"],"metadata":{"id":"ZdrUbEBysZ3Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["''' we are going to change the names from origin of the yummy recipes, so everything is fine '''"],"metadata":{"id":"s21xXXzx0tO2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vVNNNlla0tLZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2PcnNFcg0tI6"},"execution_count":null,"outputs":[]}]}